
ZYSTM32-A1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029a8  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b90  08002b90  00012b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb0  08002bb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb0  08002bb0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb0  08002bb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb0  08002bb0  00012bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002bc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002bc4  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000bb39  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000097e0  00000000  00000000  0002bb6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019da  00000000  00000000  0003534e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  00036d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00096225  00000000  00000000  000376f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000008e8  00000000  00000000  000cd920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00019311  00000000  00000000  000ce208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7519  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002844  00000000  00000000  000e756c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08002b78 	.word	0x08002b78

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08002b78 	.word	0x08002b78

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2iz>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d215      	bcs.n	800082a <__aeabi_d2iz+0x36>
 80007fe:	d511      	bpl.n	8000824 <__aeabi_d2iz+0x30>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d912      	bls.n	8000830 <__aeabi_d2iz+0x3c>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800081a:	fa23 f002 	lsr.w	r0, r3, r2
 800081e:	bf18      	it	ne
 8000820:	4240      	negne	r0, r0
 8000822:	4770      	bx	lr
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	4770      	bx	lr
 800082a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800082e:	d105      	bne.n	800083c <__aeabi_d2iz+0x48>
 8000830:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000834:	bf08      	it	eq
 8000836:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800083a:	4770      	bx	lr
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop

08000844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000844:	480c      	ldr	r0, [pc, #48]	; (8000878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000846:	490d      	ldr	r1, [pc, #52]	; (800087c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000848:	4a0d      	ldr	r2, [pc, #52]	; (8000880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800084c:	e002      	b.n	8000854 <LoopCopyDataInit>

0800084e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800084e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000852:	3304      	adds	r3, #4

08000854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000858:	d3f9      	bcc.n	800084e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800085a:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800085c:	4c0a      	ldr	r4, [pc, #40]	; (8000888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800085e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000860:	e001      	b.n	8000866 <LoopFillZerobss>

08000862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000864:	3204      	adds	r2, #4

08000866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000868:	d3fb      	bcc.n	8000862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800086a:	f000 fa6b 	bl	8000d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800086e:	f002 f957 	bl	8002b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000872:	f000 f899 	bl	80009a8 <main>
  bx lr
 8000876:	4770      	bx	lr
  ldr r0, =_sdata
 8000878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800087c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000880:	08002bb8 	.word	0x08002bb8
  ldr r2, =_sbss
 8000884:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000888:	20000074 	.word	0x20000074

0800088c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800088c:	e7fe      	b.n	800088c <ADC1_2_IRQHandler>
	...

08000890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a4:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_GPIO_Init+0x108>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a3b      	ldr	r2, [pc, #236]	; (8000998 <MX_GPIO_Init+0x108>)
 80008aa:	f043 0320 	orr.w	r3, r3, #32
 80008ae:	6193      	str	r3, [r2, #24]
 80008b0:	4b39      	ldr	r3, [pc, #228]	; (8000998 <MX_GPIO_Init+0x108>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	f003 0320 	and.w	r3, r3, #32
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008bc:	4b36      	ldr	r3, [pc, #216]	; (8000998 <MX_GPIO_Init+0x108>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a35      	ldr	r2, [pc, #212]	; (8000998 <MX_GPIO_Init+0x108>)
 80008c2:	f043 0310 	orr.w	r3, r3, #16
 80008c6:	6193      	str	r3, [r2, #24]
 80008c8:	4b33      	ldr	r3, [pc, #204]	; (8000998 <MX_GPIO_Init+0x108>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	f003 0310 	and.w	r3, r3, #16
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_GPIO_Init+0x108>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <MX_GPIO_Init+0x108>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b2d      	ldr	r3, [pc, #180]	; (8000998 <MX_GPIO_Init+0x108>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b2a      	ldr	r3, [pc, #168]	; (8000998 <MX_GPIO_Init+0x108>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a29      	ldr	r2, [pc, #164]	; (8000998 <MX_GPIO_Init+0x108>)
 80008f2:	f043 0308 	orr.w	r3, r3, #8
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b27      	ldr	r3, [pc, #156]	; (8000998 <MX_GPIO_Init+0x108>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0308 	and.w	r3, r3, #8
 8000900:	603b      	str	r3, [r7, #0]
 8000902:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2108      	movs	r1, #8
 8000908:	4824      	ldr	r0, [pc, #144]	; (800099c <MX_GPIO_Init+0x10c>)
 800090a:	f000 fd36 	bl	800137a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_MOTOR_GO_Pin|LED1_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2130      	movs	r1, #48	; 0x30
 8000912:	4823      	ldr	r0, [pc, #140]	; (80009a0 <MX_GPIO_Init+0x110>)
 8000914:	f000 fd31 	bl	800137a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEFT_MOTOR_GO_GPIO_Port, LEFT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	2180      	movs	r1, #128	; 0x80
 800091c:	4821      	ldr	r0, [pc, #132]	; (80009a4 <MX_GPIO_Init+0x114>)
 800091e:	f000 fd2c 	bl	800137a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000922:	2304      	movs	r3, #4
 8000924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0310 	add.w	r3, r7, #16
 8000932:	4619      	mov	r1, r3
 8000934:	4819      	ldr	r0, [pc, #100]	; (800099c <MX_GPIO_Init+0x10c>)
 8000936:	f000 fb75 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 800093a:	2308      	movs	r3, #8
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BEEP_GPIO_Port, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	4812      	ldr	r0, [pc, #72]	; (800099c <MX_GPIO_Init+0x10c>)
 8000952:	f000 fb67 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RIGHT_MOTOR_GO_Pin|LED1_Pin;
 8000956:	2330      	movs	r3, #48	; 0x30
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000966:	f107 0310 	add.w	r3, r7, #16
 800096a:	4619      	mov	r1, r3
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <MX_GPIO_Init+0x110>)
 800096e:	f000 fb59 	bl	8001024 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_GO_Pin;
 8000972:	2380      	movs	r3, #128	; 0x80
 8000974:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEFT_MOTOR_GO_GPIO_Port, &GPIO_InitStruct);
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_GPIO_Init+0x114>)
 800098a:	f000 fb4b 	bl	8001024 <HAL_GPIO_Init>

}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40021000 	.word	0x40021000
 800099c:	40011000 	.word	0x40011000
 80009a0:	40010800 	.word	0x40010800
 80009a4:	40010c00 	.word	0x40010c00

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ac:	f000 f9d0 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b0:	f000 f850 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b4:	f7ff ff6c 	bl	8000890 <MX_GPIO_Init>
  MX_TIM4_Init();
 80009b8:	f000 f8f0 	bl	8000b9c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80009bc:	2108      	movs	r1, #8
 80009be:	4823      	ldr	r0, [pc, #140]	; (8000a4c <main+0xa4>)
 80009c0:	f001 f984 	bl	8001ccc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80009c4:	210c      	movs	r1, #12
 80009c6:	4821      	ldr	r0, [pc, #132]	; (8000a4c <main+0xa4>)
 80009c8:	f001 f980 	bl	8001ccc <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2120      	movs	r1, #32
 80009d0:	481f      	ldr	r0, [pc, #124]	; (8000a50 <main+0xa8>)
 80009d2:	f000 fcd2 	bl	800137a <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80009d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009da:	f000 fa1b 	bl	8000e14 <HAL_Delay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2120      	movs	r1, #32
 80009e2:	481b      	ldr	r0, [pc, #108]	; (8000a50 <main+0xa8>)
 80009e4:	f000 fcc9 	bl	800137a <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80009e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ec:	f000 fa12 	bl	8000e14 <HAL_Delay>

	keyscan();
 80009f0:	f001 fef4 	bl	80027dc <keyscan>
	ZYSTM32_back(70,1000);//后�??1s
 80009f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f8:	2046      	movs	r0, #70	; 0x46
 80009fa:	f002 f86e 	bl	8002ada <ZYSTM32_back>
	ZYSTM32_brake(500);		//停止0.5s
 80009fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a02:	f001 ffcf 	bl	80029a4 <ZYSTM32_brake>
	ZYSTM32_run(70,3000);//前进3s
 8000a06:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000a0a:	2046      	movs	r0, #70	; 0x46
 8000a0c:	f001 ffac 	bl	8002968 <ZYSTM32_run>
	ZYSTM32_brake(500);		//停止0.5s
 8000a10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a14:	f001 ffc6 	bl	80029a4 <ZYSTM32_brake>

	ZYSTM32_Left(70,1000);//左转1S
 8000a18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a1c:	2046      	movs	r0, #70	; 0x46
 8000a1e:	f001 ffe3 	bl	80029e8 <ZYSTM32_Left>
	ZYSTM32_Right(70,1000);//右转1S
 8000a22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a26:	2046      	movs	r0, #70	; 0x46
 8000a28:	f002 f815 	bl	8002a56 <ZYSTM32_Right>

	ZYSTM32_Spin_Right(70,1000);//向右旋转2S
 8000a2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a30:	2046      	movs	r0, #70	; 0x46
 8000a32:	f002 f82d 	bl	8002a90 <ZYSTM32_Spin_Right>
	ZYSTM32_Spin_Left(70,1000);//向左旋转2S
 8000a36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a3a:	2046      	movs	r0, #70	; 0x46
 8000a3c:	f001 ffec 	bl	8002a18 <ZYSTM32_Spin_Left>
	ZYSTM32_brake(500);//停止0.5S
 8000a40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a44:	f001 ffae 	bl	80029a4 <ZYSTM32_brake>
  {
 8000a48:	e7c0      	b.n	80009cc <main+0x24>
 8000a4a:	bf00      	nop
 8000a4c:	20000028 	.word	0x20000028
 8000a50:	40010800 	.word	0x40010800

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b090      	sub	sp, #64	; 0x40
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0318 	add.w	r3, r7, #24
 8000a5e:	2228      	movs	r2, #40	; 0x28
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f002 f880 	bl	8002b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a7e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a80:	2300      	movs	r3, #0
 8000a82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a84:	2301      	movs	r3, #1
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a92:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0318 	add.w	r3, r7, #24
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fc85 	bl	80013ac <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f819 	bl	8000ade <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000abc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f000 fef0 	bl	80018ac <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ad2:	f000 f804 	bl	8000ade <Error_Handler>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3740      	adds	r7, #64	; 0x40
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae2:	b672      	cpsid	i
}
 8000ae4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae6:	e7fe      	b.n	8000ae6 <Error_Handler+0x8>

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_MspInit+0x5c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <HAL_MspInit+0x5c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_MspInit+0x5c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_MspInit+0x5c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_MspInit+0x5c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_MspInit+0x5c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_MspInit+0x60>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_MspInit+0x60>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b92:	f000 f923 	bl	8000ddc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <MX_TIM4_Init>:

TIM_HandleTypeDef htim4;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08e      	sub	sp, #56	; 0x38
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bcc:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000bce:	4a33      	ldr	r2, [pc, #204]	; (8000c9c <MX_TIM4_Init+0x100>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000bd2:	4b31      	ldr	r3, [pc, #196]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b2f      	ldr	r3, [pc, #188]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7200-1;
 8000bde:	4b2e      	ldr	r3, [pc, #184]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000be0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000be4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000bf2:	4829      	ldr	r0, [pc, #164]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000bf4:	f000 ffc2 	bl	8001b7c <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000bfe:	f7ff ff6e 	bl	8000ade <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4822      	ldr	r0, [pc, #136]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000c10:	f001 f9d4 	bl	8001fbc <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000c1a:	f7ff ff60 	bl	8000ade <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000c1e:	481e      	ldr	r0, [pc, #120]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000c20:	f000 fffb 	bl	8001c1a <HAL_TIM_PWM_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000c2a:	f7ff ff58 	bl	8000ade <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c36:	f107 0320 	add.w	r3, r7, #32
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4816      	ldr	r0, [pc, #88]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000c3e:	f001 fd61 	bl	8002704 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000c48:	f7ff ff49 	bl	8000ade <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c4c:	2370      	movs	r3, #112	; 0x70
 8000c4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2208      	movs	r2, #8
 8000c60:	4619      	mov	r1, r3
 8000c62:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000c64:	f001 f8ec 	bl	8001e40 <HAL_TIM_PWM_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000c6e:	f7ff ff36 	bl	8000ade <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	220c      	movs	r2, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4807      	ldr	r0, [pc, #28]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000c7a:	f001 f8e1 	bl	8001e40 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000c84:	f7ff ff2b 	bl	8000ade <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000c88:	4803      	ldr	r0, [pc, #12]	; (8000c98 <MX_TIM4_Init+0xfc>)
 8000c8a:	f000 f827 	bl	8000cdc <HAL_TIM_MspPostInit>

}
 8000c8e:	bf00      	nop
 8000c90:	3738      	adds	r7, #56	; 0x38
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000028 	.word	0x20000028
 8000c9c:	40000800 	.word	0x40000800

08000ca0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <HAL_TIM_Base_MspInit+0x34>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d10b      	bne.n	8000cca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_TIM_Base_MspInit+0x38>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <HAL_TIM_Base_MspInit+0x38>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_TIM_Base_MspInit+0x38>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40000800 	.word	0x40000800
 8000cd8:	40021000 	.word	0x40021000

08000cdc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <HAL_TIM_MspPostInit+0x5c>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d118      	bne.n	8000d2e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <HAL_TIM_MspPostInit+0x60>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <HAL_TIM_MspPostInit+0x60>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <HAL_TIM_MspPostInit+0x60>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8000d14:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4619      	mov	r1, r3
 8000d28:	4805      	ldr	r0, [pc, #20]	; (8000d40 <HAL_TIM_MspPostInit+0x64>)
 8000d2a:	f000 f97b 	bl	8001024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3720      	adds	r7, #32
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40000800 	.word	0x40000800
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010c00 	.word	0x40010c00

08000d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x28>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x28>)
 8000d5a:	f043 0310 	orr.w	r3, r3, #16
 8000d5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f92b 	bl	8000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	200f      	movs	r0, #15
 8000d68:	f000 f808 	bl	8000d7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff febc 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40022000 	.word	0x40022000

08000d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x54>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_InitTick+0x58>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f000 f935 	bl	800100a <HAL_SYSTICK_Config>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e00e      	b.n	8000dc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2b0f      	cmp	r3, #15
 8000dae:	d80a      	bhi.n	8000dc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db0:	2200      	movs	r2, #0
 8000db2:	6879      	ldr	r1, [r7, #4]
 8000db4:	f04f 30ff 	mov.w	r0, #4294967295
 8000db8:	f000 f90b 	bl	8000fd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dbc:	4a06      	ldr	r2, [pc, #24]	; (8000dd8 <HAL_InitTick+0x5c>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e000      	b.n	8000dc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000004 	.word	0x20000004

08000ddc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <HAL_IncTick+0x1c>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_IncTick+0x20>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_IncTick+0x20>)
 8000dee:	6013      	str	r3, [r2, #0]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000070 	.word	0x20000070

08000e00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b02      	ldr	r3, [pc, #8]	; (8000e10 <HAL_GetTick+0x10>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	20000070 	.word	0x20000070

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff fff0 	bl	8000e00 <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffe0 	bl	8000e00 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	; (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	; (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	; 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	; 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr

08000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f88:	d301      	bcc.n	8000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00f      	b.n	8000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <SysTick_Config+0x40>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f96:	210f      	movs	r1, #15
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f7ff ff90 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa6:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <SysTick_Config+0x40>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	e000e010 	.word	0xe000e010

08000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f7ff ff49 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b086      	sub	sp, #24
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4603      	mov	r3, r0
 8000fda:	60b9      	str	r1, [r7, #8]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe4:	f7ff ff5e 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8000fe8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	6978      	ldr	r0, [r7, #20]
 8000ff0:	f7ff ff90 	bl	8000f14 <NVIC_EncodePriority>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffa:	4611      	mov	r1, r2
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff5f 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001002:	bf00      	nop
 8001004:	3718      	adds	r7, #24
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffb0 	bl	8000f78 <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001024:	b480      	push	{r7}
 8001026:	b08b      	sub	sp, #44	; 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e179      	b.n	800132c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001038:	2201      	movs	r2, #1
 800103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 8168 	bne.w	8001326 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	4aa0      	ldr	r2, [pc, #640]	; (80012dc <HAL_GPIO_Init+0x2b8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d05e      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001060:	4a9e      	ldr	r2, [pc, #632]	; (80012dc <HAL_GPIO_Init+0x2b8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d875      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001066:	4a9e      	ldr	r2, [pc, #632]	; (80012e0 <HAL_GPIO_Init+0x2bc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d058      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 800106c:	4a9c      	ldr	r2, [pc, #624]	; (80012e0 <HAL_GPIO_Init+0x2bc>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d86f      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001072:	4a9c      	ldr	r2, [pc, #624]	; (80012e4 <HAL_GPIO_Init+0x2c0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d052      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001078:	4a9a      	ldr	r2, [pc, #616]	; (80012e4 <HAL_GPIO_Init+0x2c0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d869      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800107e:	4a9a      	ldr	r2, [pc, #616]	; (80012e8 <HAL_GPIO_Init+0x2c4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d04c      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001084:	4a98      	ldr	r2, [pc, #608]	; (80012e8 <HAL_GPIO_Init+0x2c4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d863      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800108a:	4a98      	ldr	r2, [pc, #608]	; (80012ec <HAL_GPIO_Init+0x2c8>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d046      	beq.n	800111e <HAL_GPIO_Init+0xfa>
 8001090:	4a96      	ldr	r2, [pc, #600]	; (80012ec <HAL_GPIO_Init+0x2c8>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d85d      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 8001096:	2b12      	cmp	r3, #18
 8001098:	d82a      	bhi.n	80010f0 <HAL_GPIO_Init+0xcc>
 800109a:	2b12      	cmp	r3, #18
 800109c:	d859      	bhi.n	8001152 <HAL_GPIO_Init+0x12e>
 800109e:	a201      	add	r2, pc, #4	; (adr r2, 80010a4 <HAL_GPIO_Init+0x80>)
 80010a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a4:	0800111f 	.word	0x0800111f
 80010a8:	080010f9 	.word	0x080010f9
 80010ac:	0800110b 	.word	0x0800110b
 80010b0:	0800114d 	.word	0x0800114d
 80010b4:	08001153 	.word	0x08001153
 80010b8:	08001153 	.word	0x08001153
 80010bc:	08001153 	.word	0x08001153
 80010c0:	08001153 	.word	0x08001153
 80010c4:	08001153 	.word	0x08001153
 80010c8:	08001153 	.word	0x08001153
 80010cc:	08001153 	.word	0x08001153
 80010d0:	08001153 	.word	0x08001153
 80010d4:	08001153 	.word	0x08001153
 80010d8:	08001153 	.word	0x08001153
 80010dc:	08001153 	.word	0x08001153
 80010e0:	08001153 	.word	0x08001153
 80010e4:	08001153 	.word	0x08001153
 80010e8:	08001101 	.word	0x08001101
 80010ec:	08001115 	.word	0x08001115
 80010f0:	4a7f      	ldr	r2, [pc, #508]	; (80012f0 <HAL_GPIO_Init+0x2cc>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d013      	beq.n	800111e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010f6:	e02c      	b.n	8001152 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	623b      	str	r3, [r7, #32]
          break;
 80010fe:	e029      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	3304      	adds	r3, #4
 8001106:	623b      	str	r3, [r7, #32]
          break;
 8001108:	e024      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	3308      	adds	r3, #8
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e01f      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	330c      	adds	r3, #12
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e01a      	b.n	8001154 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001126:	2304      	movs	r3, #4
 8001128:	623b      	str	r3, [r7, #32]
          break;
 800112a:	e013      	b.n	8001154 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d105      	bne.n	8001140 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001134:	2308      	movs	r3, #8
 8001136:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	611a      	str	r2, [r3, #16]
          break;
 800113e:	e009      	b.n	8001154 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001140:	2308      	movs	r3, #8
 8001142:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	615a      	str	r2, [r3, #20]
          break;
 800114a:	e003      	b.n	8001154 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
          break;
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x130>
          break;
 8001152:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	2bff      	cmp	r3, #255	; 0xff
 8001158:	d801      	bhi.n	800115e <HAL_GPIO_Init+0x13a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	e001      	b.n	8001162 <HAL_GPIO_Init+0x13e>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3304      	adds	r3, #4
 8001162:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d802      	bhi.n	8001170 <HAL_GPIO_Init+0x14c>
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x152>
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	3b08      	subs	r3, #8
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	210f      	movs	r1, #15
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	401a      	ands	r2, r3
 8001188:	6a39      	ldr	r1, [r7, #32]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	fa01 f303 	lsl.w	r3, r1, r3
 8001190:	431a      	orrs	r2, r3
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 80c1 	beq.w	8001326 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011aa:	f043 0301 	orr.w	r3, r3, #1
 80011ae:	6193      	str	r3, [r2, #24]
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_GPIO_Init+0x2d0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011bc:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	43db      	mvns	r3, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a46      	ldr	r2, [pc, #280]	; (80012fc <HAL_GPIO_Init+0x2d8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d01f      	beq.n	8001228 <HAL_GPIO_Init+0x204>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a45      	ldr	r2, [pc, #276]	; (8001300 <HAL_GPIO_Init+0x2dc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d019      	beq.n	8001224 <HAL_GPIO_Init+0x200>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a44      	ldr	r2, [pc, #272]	; (8001304 <HAL_GPIO_Init+0x2e0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x1fc>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a43      	ldr	r2, [pc, #268]	; (8001308 <HAL_GPIO_Init+0x2e4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1f8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a42      	ldr	r2, [pc, #264]	; (800130c <HAL_GPIO_Init+0x2e8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1f4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a41      	ldr	r2, [pc, #260]	; (8001310 <HAL_GPIO_Init+0x2ec>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1f0>
 8001210:	2305      	movs	r3, #5
 8001212:	e00a      	b.n	800122a <HAL_GPIO_Init+0x206>
 8001214:	2306      	movs	r3, #6
 8001216:	e008      	b.n	800122a <HAL_GPIO_Init+0x206>
 8001218:	2304      	movs	r3, #4
 800121a:	e006      	b.n	800122a <HAL_GPIO_Init+0x206>
 800121c:	2303      	movs	r3, #3
 800121e:	e004      	b.n	800122a <HAL_GPIO_Init+0x206>
 8001220:	2302      	movs	r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x206>
 8001224:	2301      	movs	r3, #1
 8001226:	e000      	b.n	800122a <HAL_GPIO_Init+0x206>
 8001228:	2300      	movs	r3, #0
 800122a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800122c:	f002 0203 	and.w	r2, r2, #3
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	4093      	lsls	r3, r2
 8001234:	68fa      	ldr	r2, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800123a:	492f      	ldr	r1, [pc, #188]	; (80012f8 <HAL_GPIO_Init+0x2d4>)
 800123c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123e:	089b      	lsrs	r3, r3, #2
 8001240:	3302      	adds	r3, #2
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	492e      	ldr	r1, [pc, #184]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	600b      	str	r3, [r1, #0]
 8001260:	e006      	b.n	8001270 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001262:	4b2c      	ldr	r3, [pc, #176]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	43db      	mvns	r3, r3
 800126a:	492a      	ldr	r1, [pc, #168]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 800126c:	4013      	ands	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d006      	beq.n	800128a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800127c:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	4924      	ldr	r1, [pc, #144]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	4313      	orrs	r3, r2
 8001286:	604b      	str	r3, [r1, #4]
 8001288:	e006      	b.n	8001298 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800128a:	4b22      	ldr	r3, [pc, #136]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	43db      	mvns	r3, r3
 8001292:	4920      	ldr	r1, [pc, #128]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 8001294:	4013      	ands	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d006      	beq.n	80012b2 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012a4:	4b1b      	ldr	r3, [pc, #108]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	491a      	ldr	r1, [pc, #104]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012b2:	4b18      	ldr	r3, [pc, #96]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4916      	ldr	r1, [pc, #88]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 80012bc:	4013      	ands	r3, r2
 80012be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d025      	beq.n	8001318 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 80012ce:	68da      	ldr	r2, [r3, #12]
 80012d0:	4910      	ldr	r1, [pc, #64]	; (8001314 <HAL_GPIO_Init+0x2f0>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60cb      	str	r3, [r1, #12]
 80012d8:	e025      	b.n	8001326 <HAL_GPIO_Init+0x302>
 80012da:	bf00      	nop
 80012dc:	10320000 	.word	0x10320000
 80012e0:	10310000 	.word	0x10310000
 80012e4:	10220000 	.word	0x10220000
 80012e8:	10210000 	.word	0x10210000
 80012ec:	10120000 	.word	0x10120000
 80012f0:	10110000 	.word	0x10110000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40010800 	.word	0x40010800
 8001300:	40010c00 	.word	0x40010c00
 8001304:	40011000 	.word	0x40011000
 8001308:	40011400 	.word	0x40011400
 800130c:	40011800 	.word	0x40011800
 8001310:	40011c00 	.word	0x40011c00
 8001314:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <HAL_GPIO_Init+0x324>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	69bb      	ldr	r3, [r7, #24]
 800131e:	43db      	mvns	r3, r3
 8001320:	4909      	ldr	r1, [pc, #36]	; (8001348 <HAL_GPIO_Init+0x324>)
 8001322:	4013      	ands	r3, r2
 8001324:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	3301      	adds	r3, #1
 800132a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	fa22 f303 	lsr.w	r3, r2, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	f47f ae7e 	bne.w	8001038 <HAL_GPIO_Init+0x14>
  }
}
 800133c:	bf00      	nop
 800133e:	bf00      	nop
 8001340:	372c      	adds	r7, #44	; 0x2c
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	40010400 	.word	0x40010400

0800134c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	4013      	ands	r3, r2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001364:	2301      	movs	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
 8001368:	e001      	b.n	800136e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
 8001382:	460b      	mov	r3, r1
 8001384:	807b      	strh	r3, [r7, #2]
 8001386:	4613      	mov	r3, r2
 8001388:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138a:	787b      	ldrb	r3, [r7, #1]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001390:	887a      	ldrh	r2, [r7, #2]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001396:	e003      	b.n	80013a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	041a      	lsls	r2, r3, #16
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	611a      	str	r2, [r3, #16]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
	...

080013ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e26c      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8087 	beq.w	80014da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013cc:	4b92      	ldr	r3, [pc, #584]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 030c 	and.w	r3, r3, #12
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	d00c      	beq.n	80013f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013d8:	4b8f      	ldr	r3, [pc, #572]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	2b08      	cmp	r3, #8
 80013e2:	d112      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
 80013e4:	4b8c      	ldr	r3, [pc, #560]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f0:	d10b      	bne.n	800140a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d06c      	beq.n	80014d8 <HAL_RCC_OscConfig+0x12c>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d168      	bne.n	80014d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e246      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x76>
 8001414:	4b80      	ldr	r3, [pc, #512]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a7f      	ldr	r2, [pc, #508]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800141a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e02e      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x98>
 800142a:	4b7b      	ldr	r3, [pc, #492]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7a      	ldr	r2, [pc, #488]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b78      	ldr	r3, [pc, #480]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a77      	ldr	r2, [pc, #476]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800143c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0xbc>
 800144e:	4b72      	ldr	r3, [pc, #456]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a71      	ldr	r2, [pc, #452]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b6f      	ldr	r3, [pc, #444]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a6e      	ldr	r2, [pc, #440]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xd4>
 8001468:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6a      	ldr	r2, [pc, #424]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b68      	ldr	r3, [pc, #416]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a67      	ldr	r2, [pc, #412]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fcba 	bl	8000e00 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fcb6 	bl	8000e00 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1fa      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b5d      	ldr	r3, [pc, #372]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xe4>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fca6 	bl	8000e00 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fca2 	bl	8000e00 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1e6      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b53      	ldr	r3, [pc, #332]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x10c>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e6:	4b4c      	ldr	r3, [pc, #304]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014f2:	4b49      	ldr	r3, [pc, #292]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 030c 	and.w	r3, r3, #12
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x18c>
 80014fe:	4b46      	ldr	r3, [pc, #280]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b43      	ldr	r3, [pc, #268]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1ba      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b3d      	ldr	r3, [pc, #244]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4939      	ldr	r1, [pc, #228]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	691b      	ldr	r3, [r3, #16]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b36      	ldr	r3, [pc, #216]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001546:	f7ff fc5b 	bl	8000e00 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fc57 	bl	8000e00 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e19b      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b2d      	ldr	r3, [pc, #180]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4927      	ldr	r1, [pc, #156]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b26      	ldr	r3, [pc, #152]	; (800161c <HAL_RCC_OscConfig+0x270>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7ff fc3a 	bl	8000e00 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fc36 	bl	8000e00 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e17a      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d03a      	beq.n	8001630 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d019      	beq.n	80015f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b17      	ldr	r3, [pc, #92]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c8:	f7ff fc1a 	bl	8000e00 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fc16 	bl	8000e00 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e15a      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_RCC_OscConfig+0x26c>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f000 faa6 	bl	8001b40 <RCC_Delay>
 80015f4:	e01c      	b.n	8001630 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_RCC_OscConfig+0x274>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015fc:	f7ff fc00 	bl	8000e00 <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001602:	e00f      	b.n	8001624 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001604:	f7ff fbfc 	bl	8000e00 <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d908      	bls.n	8001624 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e140      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000
 800161c:	42420000 	.word	0x42420000
 8001620:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001624:	4b9e      	ldr	r3, [pc, #632]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e9      	bne.n	8001604 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 80a6 	beq.w	800178a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800163e:	2300      	movs	r3, #0
 8001640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b97      	ldr	r3, [pc, #604]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10d      	bne.n	800166a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b94      	ldr	r3, [pc, #592]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a93      	ldr	r2, [pc, #588]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b91      	ldr	r3, [pc, #580]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800166a:	4b8e      	ldr	r3, [pc, #568]	; (80018a4 <HAL_RCC_OscConfig+0x4f8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d118      	bne.n	80016a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001676:	4b8b      	ldr	r3, [pc, #556]	; (80018a4 <HAL_RCC_OscConfig+0x4f8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a8a      	ldr	r2, [pc, #552]	; (80018a4 <HAL_RCC_OscConfig+0x4f8>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fbbd 	bl	8000e00 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fbb9 	bl	8000e00 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	; 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e0fd      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x4f8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x312>
 80016b0:	4b7b      	ldr	r3, [pc, #492]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	4a7a      	ldr	r2, [pc, #488]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6213      	str	r3, [r2, #32]
 80016bc:	e02d      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x334>
 80016c6:	4b76      	ldr	r3, [pc, #472]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a75      	ldr	r2, [pc, #468]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	4b73      	ldr	r3, [pc, #460]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a72      	ldr	r2, [pc, #456]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6213      	str	r3, [r2, #32]
 80016de:	e01c      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x356>
 80016e8:	4b6d      	ldr	r3, [pc, #436]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4a6c      	ldr	r2, [pc, #432]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6213      	str	r3, [r2, #32]
 80016f4:	4b6a      	ldr	r3, [pc, #424]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	4a69      	ldr	r2, [pc, #420]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6213      	str	r3, [r2, #32]
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0x36e>
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4a66      	ldr	r2, [pc, #408]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6213      	str	r3, [r2, #32]
 800170e:	4b64      	ldr	r3, [pc, #400]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4a63      	ldr	r2, [pc, #396]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d015      	beq.n	800174e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fb6d 	bl	8000e00 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fb69 	bl	8000e00 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0ab      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	4b57      	ldr	r3, [pc, #348]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ee      	beq.n	800172a <HAL_RCC_OscConfig+0x37e>
 800174c:	e014      	b.n	8001778 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fb57 	bl	8000e00 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fb53 	bl	8000e00 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e095      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	4b4c      	ldr	r3, [pc, #304]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b48      	ldr	r3, [pc, #288]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a47      	ldr	r2, [pc, #284]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001788:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 8081 	beq.w	8001896 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b42      	ldr	r3, [pc, #264]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d061      	beq.n	8001864 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69db      	ldr	r3, [r3, #28]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d146      	bne.n	8001836 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_RCC_OscConfig+0x4fc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ae:	f7ff fb27 	bl	8000e00 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017b6:	f7ff fb23 	bl	8000e00 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e067      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f0      	bne.n	80017b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017dc:	d108      	bne.n	80017f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	492d      	ldr	r1, [pc, #180]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f0:	4b2b      	ldr	r3, [pc, #172]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a19      	ldr	r1, [r3, #32]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	430b      	orrs	r3, r1
 8001802:	4927      	ldr	r1, [pc, #156]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001808:	4b27      	ldr	r3, [pc, #156]	; (80018a8 <HAL_RCC_OscConfig+0x4fc>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180e:	f7ff faf7 	bl	8000e00 <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001816:	f7ff faf3 	bl	8000e00 <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e037      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001828:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x46a>
 8001834:	e02f      	b.n	8001896 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001836:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <HAL_RCC_OscConfig+0x4fc>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fae0 	bl	8000e00 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fadc 	bl	8000e00 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e020      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x498>
 8001862:	e018      	b.n	8001896 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e013      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_OscConfig+0x4f4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	429a      	cmp	r2, r3
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188e:	429a      	cmp	r2, r3
 8001890:	d001      	beq.n	8001896 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40007000 	.word	0x40007000
 80018a8:	42420060 	.word	0x42420060

080018ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0d0      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b6a      	ldr	r3, [pc, #424]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0307 	and.w	r3, r3, #7
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d910      	bls.n	80018f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b67      	ldr	r3, [pc, #412]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 0207 	bic.w	r2, r3, #7
 80018d6:	4965      	ldr	r1, [pc, #404]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	4313      	orrs	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018de:	4b63      	ldr	r3, [pc, #396]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0b8      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d020      	beq.n	800193e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a58      	ldr	r2, [pc, #352]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001912:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001920:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a52      	ldr	r2, [pc, #328]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800192a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	494d      	ldr	r1, [pc, #308]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	4313      	orrs	r3, r2
 800193c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d040      	beq.n	80019cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d107      	bne.n	8001962 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d115      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e07f      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4b41      	ldr	r3, [pc, #260]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e073      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	4b3d      	ldr	r3, [pc, #244]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e06b      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198a:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4936      	ldr	r1, [pc, #216]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	4313      	orrs	r3, r2
 800199a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff fa30 	bl	8000e00 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff fa2c 	bl	8000e00 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e053      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 020c 	and.w	r2, r3, #12
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1eb      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019cc:	4b27      	ldr	r3, [pc, #156]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d210      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b24      	ldr	r3, [pc, #144]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 0207 	bic.w	r2, r3, #7
 80019e2:	4922      	ldr	r1, [pc, #136]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ea:	4b20      	ldr	r3, [pc, #128]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d001      	beq.n	80019fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e032      	b.n	8001a62 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d008      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a08:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4916      	ldr	r1, [pc, #88]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d009      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a26:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691b      	ldr	r3, [r3, #16]
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	490e      	ldr	r1, [pc, #56]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a3a:	f000 f821 	bl	8001a80 <HAL_RCC_GetSysClockFreq>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	490a      	ldr	r1, [pc, #40]	; (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	5ccb      	ldrb	r3, [r1, r3]
 8001a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_RCC_ClockConfig+0x1cc>)
 8001a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a56:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_ClockConfig+0x1d0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff f98e 	bl	8000d7c <HAL_InitTick>

  return HAL_OK;
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	40021000 	.word	0x40021000
 8001a74:	08002ba0 	.word	0x08002ba0
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a80:	b490      	push	{r4, r7}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a86:	4b2a      	ldr	r3, [pc, #168]	; (8001b30 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a88:	1d3c      	adds	r4, r7, #4
 8001a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a90:	f240 2301 	movw	r3, #513	; 0x201
 8001a94:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aaa:	4b22      	ldr	r3, [pc, #136]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f003 030c 	and.w	r3, r3, #12
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x40>
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0x46>
 8001abe:	e02d      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac0:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac2:	623b      	str	r3, [r7, #32]
      break;
 8001ac4:	e02d      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	0c9b      	lsrs	r3, r3, #18
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001ad8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d013      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ae4:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	0c5b      	lsrs	r3, r3, #17
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001af2:	4413      	add	r3, r2
 8001af4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001af8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	4a0e      	ldr	r2, [pc, #56]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001afe:	fb02 f203 	mul.w	r2, r2, r3
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
 8001b0a:	e004      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b10:	fb02 f303 	mul.w	r3, r2, r3
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	623b      	str	r3, [r7, #32]
      break;
 8001b1a:	e002      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b1c:	4b06      	ldr	r3, [pc, #24]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b1e:	623b      	str	r3, [r7, #32]
      break;
 8001b20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b22:	6a3b      	ldr	r3, [r7, #32]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3728      	adds	r7, #40	; 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc90      	pop	{r4, r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	08002b90 	.word	0x08002b90
 8001b34:	40021000 	.word	0x40021000
 8001b38:	007a1200 	.word	0x007a1200
 8001b3c:	003d0900 	.word	0x003d0900

08001b40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <RCC_Delay+0x34>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <RCC_Delay+0x38>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0a5b      	lsrs	r3, r3, #9
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b5c:	bf00      	nop
  }
  while (Delay --);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1e5a      	subs	r2, r3, #1
 8001b62:	60fa      	str	r2, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f9      	bne.n	8001b5c <RCC_Delay+0x1c>
}
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr
 8001b74:	20000000 	.word	0x20000000
 8001b78:	10624dd3 	.word	0x10624dd3

08001b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e041      	b.n	8001c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d106      	bne.n	8001ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff f87c 	bl	8000ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2202      	movs	r2, #2
 8001bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4610      	mov	r0, r2
 8001bbc:	f000 fac2 	bl	8002144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2201      	movs	r2, #1
 8001bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b082      	sub	sp, #8
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d101      	bne.n	8001c2c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e041      	b.n	8001cb0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d106      	bne.n	8001c46 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f839 	bl	8001cb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2202      	movs	r2, #2
 8001c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3304      	adds	r3, #4
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f000 fa73 	bl	8002144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bc80      	pop	{r7}
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d109      	bne.n	8001cf0 <HAL_TIM_PWM_Start+0x24>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	bf14      	ite	ne
 8001ce8:	2301      	movne	r3, #1
 8001cea:	2300      	moveq	r3, #0
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	e022      	b.n	8001d36 <HAL_TIM_PWM_Start+0x6a>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d109      	bne.n	8001d0a <HAL_TIM_PWM_Start+0x3e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	bf14      	ite	ne
 8001d02:	2301      	movne	r3, #1
 8001d04:	2300      	moveq	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	e015      	b.n	8001d36 <HAL_TIM_PWM_Start+0x6a>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d109      	bne.n	8001d24 <HAL_TIM_PWM_Start+0x58>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	bf14      	ite	ne
 8001d1c:	2301      	movne	r3, #1
 8001d1e:	2300      	moveq	r3, #0
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	e008      	b.n	8001d36 <HAL_TIM_PWM_Start+0x6a>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	bf14      	ite	ne
 8001d30:	2301      	movne	r3, #1
 8001d32:	2300      	moveq	r3, #0
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e072      	b.n	8001e24 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d104      	bne.n	8001d4e <HAL_TIM_PWM_Start+0x82>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d4c:	e013      	b.n	8001d76 <HAL_TIM_PWM_Start+0xaa>
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d104      	bne.n	8001d5e <HAL_TIM_PWM_Start+0x92>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d5c:	e00b      	b.n	8001d76 <HAL_TIM_PWM_Start+0xaa>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d104      	bne.n	8001d6e <HAL_TIM_PWM_Start+0xa2>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d6c:	e003      	b.n	8001d76 <HAL_TIM_PWM_Start+0xaa>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	6839      	ldr	r1, [r7, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fc9c 	bl	80026bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a28      	ldr	r2, [pc, #160]	; (8001e2c <HAL_TIM_PWM_Start+0x160>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d004      	beq.n	8001d98 <HAL_TIM_PWM_Start+0xcc>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_TIM_PWM_Start+0x164>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d101      	bne.n	8001d9c <HAL_TIM_PWM_Start+0xd0>
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e000      	b.n	8001d9e <HAL_TIM_PWM_Start+0xd2>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d007      	beq.n	8001db2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001db0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <HAL_TIM_PWM_Start+0x160>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d018      	beq.n	8001dee <HAL_TIM_PWM_Start+0x122>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	; (8001e30 <HAL_TIM_PWM_Start+0x164>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_TIM_PWM_Start+0x122>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dce:	d00e      	beq.n	8001dee <HAL_TIM_PWM_Start+0x122>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a17      	ldr	r2, [pc, #92]	; (8001e34 <HAL_TIM_PWM_Start+0x168>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d009      	beq.n	8001dee <HAL_TIM_PWM_Start+0x122>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_TIM_PWM_Start+0x16c>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d004      	beq.n	8001dee <HAL_TIM_PWM_Start+0x122>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a14      	ldr	r2, [pc, #80]	; (8001e3c <HAL_TIM_PWM_Start+0x170>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d111      	bne.n	8001e12 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0307 	and.w	r3, r3, #7
 8001df8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2b06      	cmp	r3, #6
 8001dfe:	d010      	beq.n	8001e22 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e10:	e007      	b.n	8001e22 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e22:	2300      	movs	r3, #0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40012c00 	.word	0x40012c00
 8001e30:	40013400 	.word	0x40013400
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40000800 	.word	0x40000800
 8001e3c:	40000c00 	.word	0x40000c00

08001e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e56:	2302      	movs	r3, #2
 8001e58:	e0ac      	b.n	8001fb4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	f200 809f 	bhi.w	8001fa8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001ea5 	.word	0x08001ea5
 8001e74:	08001fa9 	.word	0x08001fa9
 8001e78:	08001fa9 	.word	0x08001fa9
 8001e7c:	08001fa9 	.word	0x08001fa9
 8001e80:	08001ee5 	.word	0x08001ee5
 8001e84:	08001fa9 	.word	0x08001fa9
 8001e88:	08001fa9 	.word	0x08001fa9
 8001e8c:	08001fa9 	.word	0x08001fa9
 8001e90:	08001f27 	.word	0x08001f27
 8001e94:	08001fa9 	.word	0x08001fa9
 8001e98:	08001fa9 	.word	0x08001fa9
 8001e9c:	08001fa9 	.word	0x08001fa9
 8001ea0:	08001f67 	.word	0x08001f67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f9c4 	bl	8002238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f042 0208 	orr.w	r2, r2, #8
 8001ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0204 	bic.w	r2, r2, #4
 8001ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6999      	ldr	r1, [r3, #24]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	619a      	str	r2, [r3, #24]
      break;
 8001ee2:	e062      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 fa14 	bl	8002318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6999      	ldr	r1, [r3, #24]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	021a      	lsls	r2, r3, #8
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	619a      	str	r2, [r3, #24]
      break;
 8001f24:	e041      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 fa67 	bl	8002400 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	69da      	ldr	r2, [r3, #28]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0208 	orr.w	r2, r2, #8
 8001f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0204 	bic.w	r2, r2, #4
 8001f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69d9      	ldr	r1, [r3, #28]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	61da      	str	r2, [r3, #28]
      break;
 8001f64:	e021      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fabb 	bl	80024e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69d9      	ldr	r1, [r3, #28]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	021a      	lsls	r2, r3, #8
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	61da      	str	r2, [r3, #28]
      break;
 8001fa6:	e000      	b.n	8001faa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d101      	bne.n	8001fd4 <HAL_TIM_ConfigClockSource+0x18>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	e0b3      	b.n	800213c <HAL_TIM_ConfigClockSource+0x180>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ff2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ffa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200c:	d03e      	beq.n	800208c <HAL_TIM_ConfigClockSource+0xd0>
 800200e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002012:	f200 8087 	bhi.w	8002124 <HAL_TIM_ConfigClockSource+0x168>
 8002016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201a:	f000 8085 	beq.w	8002128 <HAL_TIM_ConfigClockSource+0x16c>
 800201e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002022:	d87f      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x168>
 8002024:	2b70      	cmp	r3, #112	; 0x70
 8002026:	d01a      	beq.n	800205e <HAL_TIM_ConfigClockSource+0xa2>
 8002028:	2b70      	cmp	r3, #112	; 0x70
 800202a:	d87b      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x168>
 800202c:	2b60      	cmp	r3, #96	; 0x60
 800202e:	d050      	beq.n	80020d2 <HAL_TIM_ConfigClockSource+0x116>
 8002030:	2b60      	cmp	r3, #96	; 0x60
 8002032:	d877      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x168>
 8002034:	2b50      	cmp	r3, #80	; 0x50
 8002036:	d03c      	beq.n	80020b2 <HAL_TIM_ConfigClockSource+0xf6>
 8002038:	2b50      	cmp	r3, #80	; 0x50
 800203a:	d873      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x168>
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d058      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x136>
 8002040:	2b40      	cmp	r3, #64	; 0x40
 8002042:	d86f      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x168>
 8002044:	2b30      	cmp	r3, #48	; 0x30
 8002046:	d064      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x156>
 8002048:	2b30      	cmp	r3, #48	; 0x30
 800204a:	d86b      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x168>
 800204c:	2b20      	cmp	r3, #32
 800204e:	d060      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x156>
 8002050:	2b20      	cmp	r3, #32
 8002052:	d867      	bhi.n	8002124 <HAL_TIM_ConfigClockSource+0x168>
 8002054:	2b00      	cmp	r3, #0
 8002056:	d05c      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x156>
 8002058:	2b10      	cmp	r3, #16
 800205a:	d05a      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800205c:	e062      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6818      	ldr	r0, [r3, #0]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6899      	ldr	r1, [r3, #8]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	f000 fb06 	bl	800267e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002080:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	609a      	str	r2, [r3, #8]
      break;
 800208a:	e04e      	b.n	800212a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6899      	ldr	r1, [r3, #8]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685a      	ldr	r2, [r3, #4]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	f000 faef 	bl	800267e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	689a      	ldr	r2, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020ae:	609a      	str	r2, [r3, #8]
      break;
 80020b0:	e03b      	b.n	800212a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6859      	ldr	r1, [r3, #4]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	461a      	mov	r2, r3
 80020c0:	f000 fa66 	bl	8002590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2150      	movs	r1, #80	; 0x50
 80020ca:	4618      	mov	r0, r3
 80020cc:	f000 fabd 	bl	800264a <TIM_ITRx_SetConfig>
      break;
 80020d0:	e02b      	b.n	800212a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	6859      	ldr	r1, [r3, #4]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	461a      	mov	r2, r3
 80020e0:	f000 fa84 	bl	80025ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2160      	movs	r1, #96	; 0x60
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 faad 	bl	800264a <TIM_ITRx_SetConfig>
      break;
 80020f0:	e01b      	b.n	800212a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	461a      	mov	r2, r3
 8002100:	f000 fa46 	bl	8002590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2140      	movs	r1, #64	; 0x40
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fa9d 	bl	800264a <TIM_ITRx_SetConfig>
      break;
 8002110:	e00b      	b.n	800212a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4619      	mov	r1, r3
 800211c:	4610      	mov	r0, r2
 800211e:	f000 fa94 	bl	800264a <TIM_ITRx_SetConfig>
        break;
 8002122:	e002      	b.n	800212a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002124:	bf00      	nop
 8002126:	e000      	b.n	800212a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002128:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	3710      	adds	r7, #16
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a33      	ldr	r2, [pc, #204]	; (8002224 <TIM_Base_SetConfig+0xe0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a32      	ldr	r2, [pc, #200]	; (8002228 <TIM_Base_SetConfig+0xe4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00f      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800216a:	d00b      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a2f      	ldr	r2, [pc, #188]	; (800222c <TIM_Base_SetConfig+0xe8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d007      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a2e      	ldr	r2, [pc, #184]	; (8002230 <TIM_Base_SetConfig+0xec>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d003      	beq.n	8002184 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <TIM_Base_SetConfig+0xf0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d108      	bne.n	8002196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a22      	ldr	r2, [pc, #136]	; (8002224 <TIM_Base_SetConfig+0xe0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <TIM_Base_SetConfig+0x82>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a21      	ldr	r2, [pc, #132]	; (8002228 <TIM_Base_SetConfig+0xe4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00f      	beq.n	80021c6 <TIM_Base_SetConfig+0x82>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ac:	d00b      	beq.n	80021c6 <TIM_Base_SetConfig+0x82>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1e      	ldr	r2, [pc, #120]	; (800222c <TIM_Base_SetConfig+0xe8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <TIM_Base_SetConfig+0x82>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1d      	ldr	r2, [pc, #116]	; (8002230 <TIM_Base_SetConfig+0xec>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d003      	beq.n	80021c6 <TIM_Base_SetConfig+0x82>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1c      	ldr	r2, [pc, #112]	; (8002234 <TIM_Base_SetConfig+0xf0>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d108      	bne.n	80021d8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a09      	ldr	r2, [pc, #36]	; (8002224 <TIM_Base_SetConfig+0xe0>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d003      	beq.n	800220c <TIM_Base_SetConfig+0xc8>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a08      	ldr	r2, [pc, #32]	; (8002228 <TIM_Base_SetConfig+0xe4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d103      	bne.n	8002214 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	615a      	str	r2, [r3, #20]
}
 800221a:	bf00      	nop
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40013400 	.word	0x40013400
 800222c:	40000400 	.word	0x40000400
 8002230:	40000800 	.word	0x40000800
 8002234:	40000c00 	.word	0x40000c00

08002238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002238:	b480      	push	{r7}
 800223a:	b087      	sub	sp, #28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	f023 0201 	bic.w	r2, r3, #1
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0303 	bic.w	r3, r3, #3
 800226e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68fa      	ldr	r2, [r7, #12]
 8002276:	4313      	orrs	r3, r2
 8002278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f023 0302 	bic.w	r3, r3, #2
 8002280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	4313      	orrs	r3, r2
 800228a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a20      	ldr	r2, [pc, #128]	; (8002310 <TIM_OC1_SetConfig+0xd8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_OC1_SetConfig+0x64>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a1f      	ldr	r2, [pc, #124]	; (8002314 <TIM_OC1_SetConfig+0xdc>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d10c      	bne.n	80022b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f023 0308 	bic.w	r3, r3, #8
 80022a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 0304 	bic.w	r3, r3, #4
 80022b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a15      	ldr	r2, [pc, #84]	; (8002310 <TIM_OC1_SetConfig+0xd8>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d003      	beq.n	80022c6 <TIM_OC1_SetConfig+0x8e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a14      	ldr	r2, [pc, #80]	; (8002314 <TIM_OC1_SetConfig+0xdc>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d111      	bne.n	80022ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	621a      	str	r2, [r3, #32]
}
 8002304:	bf00      	nop
 8002306:	371c      	adds	r7, #28
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	40012c00 	.word	0x40012c00
 8002314:	40013400 	.word	0x40013400

08002318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f023 0210 	bic.w	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4313      	orrs	r3, r2
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f023 0320 	bic.w	r3, r3, #32
 8002362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <TIM_OC2_SetConfig+0xe0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d003      	beq.n	8002380 <TIM_OC2_SetConfig+0x68>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <TIM_OC2_SetConfig+0xe4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d10d      	bne.n	800239c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800239a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <TIM_OC2_SetConfig+0xe0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d003      	beq.n	80023ac <TIM_OC2_SetConfig+0x94>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a15      	ldr	r2, [pc, #84]	; (80023fc <TIM_OC2_SetConfig+0xe4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d113      	bne.n	80023d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	621a      	str	r2, [r3, #32]
}
 80023ee:	bf00      	nop
 80023f0:	371c      	adds	r7, #28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr
 80023f8:	40012c00 	.word	0x40012c00
 80023fc:	40013400 	.word	0x40013400

08002400 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002400:	b480      	push	{r7}
 8002402:	b087      	sub	sp, #28
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	4313      	orrs	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002448:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	4313      	orrs	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a21      	ldr	r2, [pc, #132]	; (80024e0 <TIM_OC3_SetConfig+0xe0>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d003      	beq.n	8002466 <TIM_OC3_SetConfig+0x66>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a20      	ldr	r2, [pc, #128]	; (80024e4 <TIM_OC3_SetConfig+0xe4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d10d      	bne.n	8002482 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800246c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <TIM_OC3_SetConfig+0xe0>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d003      	beq.n	8002492 <TIM_OC3_SetConfig+0x92>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a15      	ldr	r2, [pc, #84]	; (80024e4 <TIM_OC3_SetConfig+0xe4>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d113      	bne.n	80024ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002498:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	693a      	ldr	r2, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	621a      	str	r2, [r3, #32]
}
 80024d4:	bf00      	nop
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc80      	pop	{r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	40012c00 	.word	0x40012c00
 80024e4:	40013400 	.word	0x40013400

080024e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b087      	sub	sp, #28
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002532:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	031b      	lsls	r3, r3, #12
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a11      	ldr	r2, [pc, #68]	; (8002588 <TIM_OC4_SetConfig+0xa0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d003      	beq.n	8002550 <TIM_OC4_SetConfig+0x68>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a10      	ldr	r2, [pc, #64]	; (800258c <TIM_OC4_SetConfig+0xa4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d109      	bne.n	8002564 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	019b      	lsls	r3, r3, #6
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	621a      	str	r2, [r3, #32]
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr
 8002588:	40012c00 	.word	0x40012c00
 800258c:	40013400 	.word	0x40013400

08002590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	f023 0201 	bic.w	r2, r3, #1
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f023 030a 	bic.w	r3, r3, #10
 80025cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ce:	697a      	ldr	r2, [r7, #20]
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	621a      	str	r2, [r3, #32]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	f023 0210 	bic.w	r2, r3, #16
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002616:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	031b      	lsls	r3, r3, #12
 800261c:	697a      	ldr	r2, [r7, #20]
 800261e:	4313      	orrs	r3, r2
 8002620:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002628:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	693a      	ldr	r2, [r7, #16]
 800263e:	621a      	str	r2, [r3, #32]
}
 8002640:	bf00      	nop
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr

0800264a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800264a:	b480      	push	{r7}
 800264c:	b085      	sub	sp, #20
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4313      	orrs	r3, r2
 8002668:	f043 0307 	orr.w	r3, r3, #7
 800266c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	609a      	str	r2, [r3, #8]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr

0800267e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800267e:	b480      	push	{r7}
 8002680:	b087      	sub	sp, #28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002698:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	021a      	lsls	r2, r3, #8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	609a      	str	r2, [r3, #8]
}
 80026b2:	bf00      	nop
 80026b4:	371c      	adds	r7, #28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr

080026bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026bc:	b480      	push	{r7}
 80026be:	b087      	sub	sp, #28
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	2201      	movs	r2, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a1a      	ldr	r2, [r3, #32]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	43db      	mvns	r3, r3
 80026de:	401a      	ands	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a1a      	ldr	r2, [r3, #32]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f003 031f 	and.w	r3, r3, #31
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	431a      	orrs	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002718:	2302      	movs	r3, #2
 800271a:	e050      	b.n	80027be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2202      	movs	r2, #2
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a1b      	ldr	r2, [pc, #108]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a19      	ldr	r2, [pc, #100]	; (80027cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002772:	d00e      	beq.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a14      	ldr	r2, [pc, #80]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d10c      	bne.n	80027ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002798:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	40012c00 	.word	0x40012c00
 80027cc:	40013400 	.word	0x40013400
 80027d0:	40000400 	.word	0x40000400
 80027d4:	40000800 	.word	0x40000800
 80027d8:	40000c00 	.word	0x40000c00

080027dc <keyscan>:
#include "keyscan.h"
#include "main.h"

void keyscan()
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
	int val;
	val = KEY; //读取按键
 80027e2:	2104      	movs	r1, #4
 80027e4:	481e      	ldr	r0, [pc, #120]	; (8002860 <keyscan+0x84>)
 80027e6:	f7fe fdb1 	bl	800134c <HAL_GPIO_ReadPin>
 80027ea:	4603      	mov	r3, r0
 80027ec:	607b      	str	r3, [r7, #4]
	while(!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))	//当按键没有被按下时,一直循环
 80027ee:	e005      	b.n	80027fc <keyscan+0x20>
	{
		val = KEY;
 80027f0:	2104      	movs	r1, #4
 80027f2:	481b      	ldr	r0, [pc, #108]	; (8002860 <keyscan+0x84>)
 80027f4:	f7fe fdaa 	bl	800134c <HAL_GPIO_ReadPin>
 80027f8:	4603      	mov	r3, r0
 80027fa:	607b      	str	r3, [r7, #4]
	while(!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))	//当按键没有被按下时,一直循环
 80027fc:	2104      	movs	r1, #4
 80027fe:	4818      	ldr	r0, [pc, #96]	; (8002860 <keyscan+0x84>)
 8002800:	f7fe fda4 	bl	800134c <HAL_GPIO_ReadPin>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f2      	beq.n	80027f0 <keyscan+0x14>
	}
	while(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))		//当按键被按下时
 800280a:	e01c      	b.n	8002846 <keyscan+0x6a>
	{
		HAL_Delay(10);	//延时10ms
 800280c:	200a      	movs	r0, #10
 800280e:	f7fe fb01 	bl	8000e14 <HAL_Delay>
		val = KEY;		//读取数字端口PC2口电平值赋给val
 8002812:	2104      	movs	r1, #4
 8002814:	4812      	ldr	r0, [pc, #72]	; (8002860 <keyscan+0x84>)
 8002816:	f7fe fd99 	bl	800134c <HAL_GPIO_ReadPin>
 800281a:	4603      	mov	r3, r0
 800281c:	607b      	str	r3, [r7, #4]
		if(val = 1)		//第二次判断按键是否被按下
 800281e:	2301      	movs	r3, #1
 8002820:	607b      	str	r3, [r7, #4]
		{
			BEEP_SET;	//蜂鸣器响
 8002822:	2201      	movs	r2, #1
 8002824:	2108      	movs	r1, #8
 8002826:	480e      	ldr	r0, [pc, #56]	; (8002860 <keyscan+0x84>)
 8002828:	f7fe fda7 	bl	800137a <HAL_GPIO_WritePin>
			while(!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))	//判断按下是否被松开
 800282c:	e004      	b.n	8002838 <keyscan+0x5c>
				BEEP_RESET; //蜂鸣器停止
 800282e:	2200      	movs	r2, #0
 8002830:	2108      	movs	r1, #8
 8002832:	480b      	ldr	r0, [pc, #44]	; (8002860 <keyscan+0x84>)
 8002834:	f7fe fda1 	bl	800137a <HAL_GPIO_WritePin>
			while(!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))	//判断按下是否被松开
 8002838:	2104      	movs	r1, #4
 800283a:	4809      	ldr	r0, [pc, #36]	; (8002860 <keyscan+0x84>)
 800283c:	f7fe fd86 	bl	800134c <HAL_GPIO_ReadPin>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d0f3      	beq.n	800282e <keyscan+0x52>
	while(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))		//当按键被按下时
 8002846:	2104      	movs	r1, #4
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <keyscan+0x84>)
 800284a:	f7fe fd7f 	bl	800134c <HAL_GPIO_ReadPin>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1db      	bne.n	800280c <keyscan+0x30>
		}
		else
			BEEP_RESET; //蜂鸣器停止
	}
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40011000 	.word	0x40011000
 8002864:	00000000 	.word	0x00000000

08002868 <SetMotorSpeed>:

extern TIM_HandleTypeDef htim4;
//signed short sPWMR,sPWML,dPWM;

void SetMotorSpeed(unsigned char ucChannel,signed char cSpeed)
{
 8002868:	b5b0      	push	{r4, r5, r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	460a      	mov	r2, r1
 8002872:	71fb      	strb	r3, [r7, #7]
 8002874:	4613      	mov	r3, r2
 8002876:	71bb      	strb	r3, [r7, #6]
	short sPWM;

	if(cSpeed>=100) cSpeed = 100;
 8002878:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800287c:	2b63      	cmp	r3, #99	; 0x63
 800287e:	dd01      	ble.n	8002884 <SetMotorSpeed+0x1c>
 8002880:	2364      	movs	r3, #100	; 0x64
 8002882:	71bb      	strb	r3, [r7, #6]
	if(cSpeed<=-100) cSpeed =-100;
 8002884:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002888:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800288c:	da01      	bge.n	8002892 <SetMotorSpeed+0x2a>
 800288e:	239c      	movs	r3, #156	; 0x9c
 8002890:	71bb      	strb	r3, [r7, #6]

	sPWM = 7201 - fabs(cSpeed)*72;
 8002892:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd ff42 	bl	8000720 <__aeabi_i2d>
 800289c:	4602      	mov	r2, r0
 800289e:	460b      	mov	r3, r1
 80028a0:	4614      	mov	r4, r2
 80028a2:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80028a6:	f04f 0200 	mov.w	r2, #0
 80028aa:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <SetMotorSpeed+0xf0>)
 80028ac:	4620      	mov	r0, r4
 80028ae:	4629      	mov	r1, r5
 80028b0:	f7fd fcba 	bl	8000228 <__aeabi_dmul>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	a125      	add	r1, pc, #148	; (adr r1, 8002950 <SetMotorSpeed+0xe8>)
 80028ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028be:	f7fd fde1 	bl	8000484 <__aeabi_dsub>
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	f7fd ff93 	bl	80007f4 <__aeabi_d2iz>
 80028ce:	4603      	mov	r3, r0
 80028d0:	81fb      	strh	r3, [r7, #14]
	switch(ucChannel)
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d002      	beq.n	80028de <SetMotorSpeed+0x76>
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d019      	beq.n	8002910 <SetMotorSpeed+0xa8>
				LEFT_MOTOR_GO_SET;
			else if (cSpeed<0)
				LEFT_MOTOR_GO_RESET;
			break;
	}
}
 80028dc:	e034      	b.n	8002948 <SetMotorSpeed+0xe0>
			__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,sPWM);
 80028de:	4b1f      	ldr	r3, [pc, #124]	; (800295c <SetMotorSpeed+0xf4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80028e6:	63da      	str	r2, [r3, #60]	; 0x3c
			if(cSpeed>0)
 80028e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	dd05      	ble.n	80028fc <SetMotorSpeed+0x94>
				RIGHT_MOTOR_GO_RESET;
 80028f0:	2200      	movs	r2, #0
 80028f2:	2110      	movs	r1, #16
 80028f4:	481a      	ldr	r0, [pc, #104]	; (8002960 <SetMotorSpeed+0xf8>)
 80028f6:	f7fe fd40 	bl	800137a <HAL_GPIO_WritePin>
			break;
 80028fa:	e022      	b.n	8002942 <SetMotorSpeed+0xda>
			else if(cSpeed<0)
 80028fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002900:	2b00      	cmp	r3, #0
 8002902:	da1e      	bge.n	8002942 <SetMotorSpeed+0xda>
				RIGHT_MOTOR_GO_SET;
 8002904:	2201      	movs	r2, #1
 8002906:	2110      	movs	r1, #16
 8002908:	4815      	ldr	r0, [pc, #84]	; (8002960 <SetMotorSpeed+0xf8>)
 800290a:	f7fe fd36 	bl	800137a <HAL_GPIO_WritePin>
			break;
 800290e:	e018      	b.n	8002942 <SetMotorSpeed+0xda>
			__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,sPWM);
 8002910:	4b12      	ldr	r3, [pc, #72]	; (800295c <SetMotorSpeed+0xf4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002918:	641a      	str	r2, [r3, #64]	; 0x40
			if (cSpeed>0)
 800291a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800291e:	2b00      	cmp	r3, #0
 8002920:	dd05      	ble.n	800292e <SetMotorSpeed+0xc6>
				LEFT_MOTOR_GO_SET;
 8002922:	2201      	movs	r2, #1
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	480f      	ldr	r0, [pc, #60]	; (8002964 <SetMotorSpeed+0xfc>)
 8002928:	f7fe fd27 	bl	800137a <HAL_GPIO_WritePin>
			break;
 800292c:	e00b      	b.n	8002946 <SetMotorSpeed+0xde>
			else if (cSpeed<0)
 800292e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002932:	2b00      	cmp	r3, #0
 8002934:	da07      	bge.n	8002946 <SetMotorSpeed+0xde>
				LEFT_MOTOR_GO_RESET;
 8002936:	2200      	movs	r2, #0
 8002938:	2180      	movs	r1, #128	; 0x80
 800293a:	480a      	ldr	r0, [pc, #40]	; (8002964 <SetMotorSpeed+0xfc>)
 800293c:	f7fe fd1d 	bl	800137a <HAL_GPIO_WritePin>
			break;
 8002940:	e001      	b.n	8002946 <SetMotorSpeed+0xde>
			break;
 8002942:	bf00      	nop
 8002944:	e000      	b.n	8002948 <SetMotorSpeed+0xe0>
			break;
 8002946:	bf00      	nop
}
 8002948:	bf00      	nop
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bdb0      	pop	{r4, r5, r7, pc}
 8002950:	00000000 	.word	0x00000000
 8002954:	40bc2100 	.word	0x40bc2100
 8002958:	40520000 	.word	0x40520000
 800295c:	20000028 	.word	0x20000028
 8002960:	40010800 	.word	0x40010800
 8002964:	40010c00 	.word	0x40010c00

08002968 <ZYSTM32_run>:

//----------------------------------运动函数--------------------------------
void ZYSTM32_run(signed char speed,int time) //前进函数
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	6039      	str	r1, [r7, #0]
 8002972:	71fb      	strb	r3, [r7, #7]
	signed char f_speed = -speed;
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	425b      	negs	r3, r3
 8002978:	b2db      	uxtb	r3, r3
 800297a:	73fb      	strb	r3, [r7, #15]
	SetMotorSpeed(1,f_speed);	//左轮  //为负数
 800297c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002980:	4619      	mov	r1, r3
 8002982:	2001      	movs	r0, #1
 8002984:	f7ff ff70 	bl	8002868 <SetMotorSpeed>
	SetMotorSpeed(0,speed);		//右轮  //为正数
 8002988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298c:	4619      	mov	r1, r3
 800298e:	2000      	movs	r0, #0
 8002990:	f7ff ff6a 	bl	8002868 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe fa3c 	bl	8000e14 <HAL_Delay>
}
 800299c:	bf00      	nop
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <ZYSTM32_brake>:

void ZYSTM32_brake(int time)	//刹车函数
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
	SetMotorSpeed(1,0); // 左轮  //为0
 80029ac:	2100      	movs	r1, #0
 80029ae:	2001      	movs	r0, #1
 80029b0:	f7ff ff5a 	bl	8002868 <SetMotorSpeed>
	SetMotorSpeed(0,0); // 右轮  //为0
 80029b4:	2100      	movs	r1, #0
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7ff ff56 	bl	8002868 <SetMotorSpeed>
	RIGHT_MOTOR_GO_RESET;
 80029bc:	2200      	movs	r2, #0
 80029be:	2110      	movs	r1, #16
 80029c0:	4807      	ldr	r0, [pc, #28]	; (80029e0 <ZYSTM32_brake+0x3c>)
 80029c2:	f7fe fcda 	bl	800137a <HAL_GPIO_WritePin>
	LEFT_MOTOR_GO_RESET;
 80029c6:	2200      	movs	r2, #0
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	4806      	ldr	r0, [pc, #24]	; (80029e4 <ZYSTM32_brake+0x40>)
 80029cc:	f7fe fcd5 	bl	800137a <HAL_GPIO_WritePin>
	HAL_Delay(time);			//时间为毫秒
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fa1e 	bl	8000e14 <HAL_Delay>
}
 80029d8:	bf00      	nop
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40010800 	.word	0x40010800
 80029e4:	40010c00 	.word	0x40010c00

080029e8 <ZYSTM32_Left>:

void ZYSTM32_Left(signed char speed,int time)	//左转函数
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
	SetMotorSpeed(1,0); // 左轮		//左轮不动
 80029f4:	2100      	movs	r1, #0
 80029f6:	2001      	movs	r0, #1
 80029f8:	f7ff ff36 	bl	8002868 <SetMotorSpeed>
	SetMotorSpeed(0,speed);			//右轮为正
 80029fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a00:	4619      	mov	r1, r3
 8002a02:	2000      	movs	r0, #0
 8002a04:	f7ff ff30 	bl	8002868 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fe fa02 	bl	8000e14 <HAL_Delay>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <ZYSTM32_Spin_Left>:

void ZYSTM32_Spin_Left(signed char speed,int time)	//左旋转函数
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	6039      	str	r1, [r7, #0]
 8002a22:	71fb      	strb	r3, [r7, #7]
	signed char u_speed = 100 - speed;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	73fb      	strb	r3, [r7, #15]
	SetMotorSpeed(1,speed);	//左轮		//左轮为正
 8002a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a32:	4619      	mov	r1, r3
 8002a34:	2001      	movs	r0, #1
 8002a36:	f7ff ff17 	bl	8002868 <SetMotorSpeed>
	SetMotorSpeed(0,u_speed);			//右轮为正
 8002a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3e:	4619      	mov	r1, r3
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff ff11 	bl	8002868 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f9e3 	bl	8000e14 <HAL_Delay>
}
 8002a4e:	bf00      	nop
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <ZYSTM32_Right>:

void ZYSTM32_Right(signed char speed,int time)	//右转函数
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	6039      	str	r1, [r7, #0]
 8002a60:	71fb      	strb	r3, [r7, #7]
	signed char f_speed = 100 - speed;
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	73fb      	strb	r3, [r7, #15]
	SetMotorSpeed(1,f_speed); 	// 左轮		//左轮负
 8002a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a70:	4619      	mov	r1, r3
 8002a72:	2001      	movs	r0, #1
 8002a74:	f7ff fef8 	bl	8002868 <SetMotorSpeed>
	SetMotorSpeed(0,0);			//右轮为0
 8002a78:	2100      	movs	r1, #0
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7ff fef4 	bl	8002868 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f9c6 	bl	8000e14 <HAL_Delay>
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <ZYSTM32_Spin_Right>:

void ZYSTM32_Spin_Right(signed char speed,int time)		//右旋转函数
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	71fb      	strb	r3, [r7, #7]
	signed char u_speed = 100 - speed;
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	73fb      	strb	r3, [r7, #15]
	signed char f_speed = -speed;
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	73bb      	strb	r3, [r7, #14]
	SetMotorSpeed(1,-u_speed);	//左轮		//左轮为负
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	425b      	negs	r3, r3
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f7ff fed5 	bl	8002868 <SetMotorSpeed>
	SetMotorSpeed(0,f_speed);	//右轮		//右轮为负
 8002abe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7ff fecf 	bl	8002868 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fe f9a1 	bl	8000e14 <HAL_Delay>
}
 8002ad2:	bf00      	nop
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <ZYSTM32_back>:

void ZYSTM32_back(signed char speed,int time)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	6039      	str	r1, [r7, #0]
 8002ae4:	71fb      	strb	r3, [r7, #7]
	signed char u_speed = 100 - speed;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	73fb      	strb	r3, [r7, #15]
	signed char f_speed = - u_speed;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	425b      	negs	r3, r3
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	73bb      	strb	r3, [r7, #14]
	SetMotorSpeed(1,u_speed);	//左轮		//左轮为正
 8002af8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002afc:	4619      	mov	r1, r3
 8002afe:	2001      	movs	r0, #1
 8002b00:	f7ff feb2 	bl	8002868 <SetMotorSpeed>
	SetMotorSpeed(0,f_speed);	//右轮		//右轮为负
 8002b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7ff feac 	bl	8002868 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe f97e 	bl	8000e14 <HAL_Delay>
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <__libc_init_array>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	2600      	movs	r6, #0
 8002b24:	4d0c      	ldr	r5, [pc, #48]	; (8002b58 <__libc_init_array+0x38>)
 8002b26:	4c0d      	ldr	r4, [pc, #52]	; (8002b5c <__libc_init_array+0x3c>)
 8002b28:	1b64      	subs	r4, r4, r5
 8002b2a:	10a4      	asrs	r4, r4, #2
 8002b2c:	42a6      	cmp	r6, r4
 8002b2e:	d109      	bne.n	8002b44 <__libc_init_array+0x24>
 8002b30:	f000 f822 	bl	8002b78 <_init>
 8002b34:	2600      	movs	r6, #0
 8002b36:	4d0a      	ldr	r5, [pc, #40]	; (8002b60 <__libc_init_array+0x40>)
 8002b38:	4c0a      	ldr	r4, [pc, #40]	; (8002b64 <__libc_init_array+0x44>)
 8002b3a:	1b64      	subs	r4, r4, r5
 8002b3c:	10a4      	asrs	r4, r4, #2
 8002b3e:	42a6      	cmp	r6, r4
 8002b40:	d105      	bne.n	8002b4e <__libc_init_array+0x2e>
 8002b42:	bd70      	pop	{r4, r5, r6, pc}
 8002b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b48:	4798      	blx	r3
 8002b4a:	3601      	adds	r6, #1
 8002b4c:	e7ee      	b.n	8002b2c <__libc_init_array+0xc>
 8002b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b52:	4798      	blx	r3
 8002b54:	3601      	adds	r6, #1
 8002b56:	e7f2      	b.n	8002b3e <__libc_init_array+0x1e>
 8002b58:	08002bb0 	.word	0x08002bb0
 8002b5c:	08002bb0 	.word	0x08002bb0
 8002b60:	08002bb0 	.word	0x08002bb0
 8002b64:	08002bb4 	.word	0x08002bb4

08002b68 <memset>:
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4402      	add	r2, r0
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d100      	bne.n	8002b72 <memset+0xa>
 8002b70:	4770      	bx	lr
 8002b72:	f803 1b01 	strb.w	r1, [r3], #1
 8002b76:	e7f9      	b.n	8002b6c <memset+0x4>

08002b78 <_init>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr

08002b84 <_fini>:
 8002b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b86:	bf00      	nop
 8002b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b8a:	bc08      	pop	{r3}
 8002b8c:	469e      	mov	lr, r3
 8002b8e:	4770      	bx	lr
