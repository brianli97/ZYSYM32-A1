
ZYSTM32-A1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003388  08003388  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003388  08003388  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003388  08003388  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800338c  0800338c  0001338c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  0800339c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000d00  200000c0  0800339c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000c43a  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000aaba  00000000  00000000  0002c46f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c74  00000000  00000000  00036f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a20  00000000  00000000  00038ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0009659c  00000000  00000000  000395c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000928  00000000  00000000  000cfb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001953a  00000000  00000000  000d0488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e99c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a8  00000000  00000000  000e9a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08003350 	.word	0x08003350

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08003350 	.word	0x08003350

08000228 <__aeabi_fmul>:
 8000228:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000230:	bf1e      	ittt	ne
 8000232:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000236:	ea92 0f0c 	teqne	r2, ip
 800023a:	ea93 0f0c 	teqne	r3, ip
 800023e:	d06f      	beq.n	8000320 <__aeabi_fmul+0xf8>
 8000240:	441a      	add	r2, r3
 8000242:	ea80 0c01 	eor.w	ip, r0, r1
 8000246:	0240      	lsls	r0, r0, #9
 8000248:	bf18      	it	ne
 800024a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800024e:	d01e      	beq.n	800028e <__aeabi_fmul+0x66>
 8000250:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000254:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000258:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800025c:	fba0 3101 	umull	r3, r1, r0, r1
 8000260:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000264:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000268:	bf3e      	ittt	cc
 800026a:	0049      	lslcc	r1, r1, #1
 800026c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000270:	005b      	lslcc	r3, r3, #1
 8000272:	ea40 0001 	orr.w	r0, r0, r1
 8000276:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800027a:	2afd      	cmp	r2, #253	; 0xfd
 800027c:	d81d      	bhi.n	80002ba <__aeabi_fmul+0x92>
 800027e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000282:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000286:	bf08      	it	eq
 8000288:	f020 0001 	biceq.w	r0, r0, #1
 800028c:	4770      	bx	lr
 800028e:	f090 0f00 	teq	r0, #0
 8000292:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000296:	bf08      	it	eq
 8000298:	0249      	lsleq	r1, r1, #9
 800029a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800029e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80002a2:	3a7f      	subs	r2, #127	; 0x7f
 80002a4:	bfc2      	ittt	gt
 80002a6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80002aa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80002ae:	4770      	bxgt	lr
 80002b0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002b4:	f04f 0300 	mov.w	r3, #0
 80002b8:	3a01      	subs	r2, #1
 80002ba:	dc5d      	bgt.n	8000378 <__aeabi_fmul+0x150>
 80002bc:	f112 0f19 	cmn.w	r2, #25
 80002c0:	bfdc      	itt	le
 80002c2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80002c6:	4770      	bxle	lr
 80002c8:	f1c2 0200 	rsb	r2, r2, #0
 80002cc:	0041      	lsls	r1, r0, #1
 80002ce:	fa21 f102 	lsr.w	r1, r1, r2
 80002d2:	f1c2 0220 	rsb	r2, r2, #32
 80002d6:	fa00 fc02 	lsl.w	ip, r0, r2
 80002da:	ea5f 0031 	movs.w	r0, r1, rrx
 80002de:	f140 0000 	adc.w	r0, r0, #0
 80002e2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80002e6:	bf08      	it	eq
 80002e8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80002ec:	4770      	bx	lr
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80002f6:	bf02      	ittt	eq
 80002f8:	0040      	lsleq	r0, r0, #1
 80002fa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80002fe:	3a01      	subeq	r2, #1
 8000300:	d0f9      	beq.n	80002f6 <__aeabi_fmul+0xce>
 8000302:	ea40 000c 	orr.w	r0, r0, ip
 8000306:	f093 0f00 	teq	r3, #0
 800030a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800030e:	bf02      	ittt	eq
 8000310:	0049      	lsleq	r1, r1, #1
 8000312:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000316:	3b01      	subeq	r3, #1
 8000318:	d0f9      	beq.n	800030e <__aeabi_fmul+0xe6>
 800031a:	ea41 010c 	orr.w	r1, r1, ip
 800031e:	e78f      	b.n	8000240 <__aeabi_fmul+0x18>
 8000320:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000324:	ea92 0f0c 	teq	r2, ip
 8000328:	bf18      	it	ne
 800032a:	ea93 0f0c 	teqne	r3, ip
 800032e:	d00a      	beq.n	8000346 <__aeabi_fmul+0x11e>
 8000330:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000334:	bf18      	it	ne
 8000336:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800033a:	d1d8      	bne.n	80002ee <__aeabi_fmul+0xc6>
 800033c:	ea80 0001 	eor.w	r0, r0, r1
 8000340:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000344:	4770      	bx	lr
 8000346:	f090 0f00 	teq	r0, #0
 800034a:	bf17      	itett	ne
 800034c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000350:	4608      	moveq	r0, r1
 8000352:	f091 0f00 	teqne	r1, #0
 8000356:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800035a:	d014      	beq.n	8000386 <__aeabi_fmul+0x15e>
 800035c:	ea92 0f0c 	teq	r2, ip
 8000360:	d101      	bne.n	8000366 <__aeabi_fmul+0x13e>
 8000362:	0242      	lsls	r2, r0, #9
 8000364:	d10f      	bne.n	8000386 <__aeabi_fmul+0x15e>
 8000366:	ea93 0f0c 	teq	r3, ip
 800036a:	d103      	bne.n	8000374 <__aeabi_fmul+0x14c>
 800036c:	024b      	lsls	r3, r1, #9
 800036e:	bf18      	it	ne
 8000370:	4608      	movne	r0, r1
 8000372:	d108      	bne.n	8000386 <__aeabi_fmul+0x15e>
 8000374:	ea80 0001 	eor.w	r0, r0, r1
 8000378:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800037c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000380:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000384:	4770      	bx	lr
 8000386:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800038a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_dmul>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000716:	bf1d      	ittte	ne
 8000718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800071c:	ea94 0f0c 	teqne	r4, ip
 8000720:	ea95 0f0c 	teqne	r5, ip
 8000724:	f000 f8de 	bleq	80008e4 <__aeabi_dmul+0x1dc>
 8000728:	442c      	add	r4, r5
 800072a:	ea81 0603 	eor.w	r6, r1, r3
 800072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800073a:	bf18      	it	ne
 800073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000748:	d038      	beq.n	80007bc <__aeabi_dmul+0xb4>
 800074a:	fba0 ce02 	umull	ip, lr, r0, r2
 800074e:	f04f 0500 	mov.w	r5, #0
 8000752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800075e:	f04f 0600 	mov.w	r6, #0
 8000762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000766:	f09c 0f00 	teq	ip, #0
 800076a:	bf18      	it	ne
 800076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800077c:	d204      	bcs.n	8000788 <__aeabi_dmul+0x80>
 800077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000782:	416d      	adcs	r5, r5
 8000784:	eb46 0606 	adc.w	r6, r6, r6
 8000788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007a0:	bf88      	it	hi
 80007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007a6:	d81e      	bhi.n	80007e6 <__aeabi_dmul+0xde>
 80007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007ac:	bf08      	it	eq
 80007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007b2:	f150 0000 	adcs.w	r0, r0, #0
 80007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007c0:	ea46 0101 	orr.w	r1, r6, r1
 80007c4:	ea40 0002 	orr.w	r0, r0, r2
 80007c8:	ea81 0103 	eor.w	r1, r1, r3
 80007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007d0:	bfc2      	ittt	gt
 80007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007da:	bd70      	popgt	{r4, r5, r6, pc}
 80007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007e0:	f04f 0e00 	mov.w	lr, #0
 80007e4:	3c01      	subs	r4, #1
 80007e6:	f300 80ab 	bgt.w	8000940 <__aeabi_dmul+0x238>
 80007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ee:	bfde      	ittt	le
 80007f0:	2000      	movle	r0, #0
 80007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007f6:	bd70      	pople	{r4, r5, r6, pc}
 80007f8:	f1c4 0400 	rsb	r4, r4, #0
 80007fc:	3c20      	subs	r4, #32
 80007fe:	da35      	bge.n	800086c <__aeabi_dmul+0x164>
 8000800:	340c      	adds	r4, #12
 8000802:	dc1b      	bgt.n	800083c <__aeabi_dmul+0x134>
 8000804:	f104 0414 	add.w	r4, r4, #20
 8000808:	f1c4 0520 	rsb	r5, r4, #32
 800080c:	fa00 f305 	lsl.w	r3, r0, r5
 8000810:	fa20 f004 	lsr.w	r0, r0, r4
 8000814:	fa01 f205 	lsl.w	r2, r1, r5
 8000818:	ea40 0002 	orr.w	r0, r0, r2
 800081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000828:	fa21 f604 	lsr.w	r6, r1, r4
 800082c:	eb42 0106 	adc.w	r1, r2, r6
 8000830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000834:	bf08      	it	eq
 8000836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800083a:	bd70      	pop	{r4, r5, r6, pc}
 800083c:	f1c4 040c 	rsb	r4, r4, #12
 8000840:	f1c4 0520 	rsb	r5, r4, #32
 8000844:	fa00 f304 	lsl.w	r3, r0, r4
 8000848:	fa20 f005 	lsr.w	r0, r0, r5
 800084c:	fa01 f204 	lsl.w	r2, r1, r4
 8000850:	ea40 0002 	orr.w	r0, r0, r2
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800085c:	f141 0100 	adc.w	r1, r1, #0
 8000860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000864:	bf08      	it	eq
 8000866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800086a:	bd70      	pop	{r4, r5, r6, pc}
 800086c:	f1c4 0520 	rsb	r5, r4, #32
 8000870:	fa00 f205 	lsl.w	r2, r0, r5
 8000874:	ea4e 0e02 	orr.w	lr, lr, r2
 8000878:	fa20 f304 	lsr.w	r3, r0, r4
 800087c:	fa01 f205 	lsl.w	r2, r1, r5
 8000880:	ea43 0302 	orr.w	r3, r3, r2
 8000884:	fa21 f004 	lsr.w	r0, r1, r4
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	fa21 f204 	lsr.w	r2, r1, r4
 8000890:	ea20 0002 	bic.w	r0, r0, r2
 8000894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800089c:	bf08      	it	eq
 800089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f094 0f00 	teq	r4, #0
 80008a8:	d10f      	bne.n	80008ca <__aeabi_dmul+0x1c2>
 80008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008ae:	0040      	lsls	r0, r0, #1
 80008b0:	eb41 0101 	adc.w	r1, r1, r1
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3c01      	subeq	r4, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1a6>
 80008be:	ea41 0106 	orr.w	r1, r1, r6
 80008c2:	f095 0f00 	teq	r5, #0
 80008c6:	bf18      	it	ne
 80008c8:	4770      	bxne	lr
 80008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	eb43 0303 	adc.w	r3, r3, r3
 80008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008d8:	bf08      	it	eq
 80008da:	3d01      	subeq	r5, #1
 80008dc:	d0f7      	beq.n	80008ce <__aeabi_dmul+0x1c6>
 80008de:	ea43 0306 	orr.w	r3, r3, r6
 80008e2:	4770      	bx	lr
 80008e4:	ea94 0f0c 	teq	r4, ip
 80008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ec:	bf18      	it	ne
 80008ee:	ea95 0f0c 	teqne	r5, ip
 80008f2:	d00c      	beq.n	800090e <__aeabi_dmul+0x206>
 80008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f8:	bf18      	it	ne
 80008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fe:	d1d1      	bne.n	80008a4 <__aeabi_dmul+0x19c>
 8000900:	ea81 0103 	eor.w	r1, r1, r3
 8000904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000908:	f04f 0000 	mov.w	r0, #0
 800090c:	bd70      	pop	{r4, r5, r6, pc}
 800090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000912:	bf06      	itte	eq
 8000914:	4610      	moveq	r0, r2
 8000916:	4619      	moveq	r1, r3
 8000918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091c:	d019      	beq.n	8000952 <__aeabi_dmul+0x24a>
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	d102      	bne.n	800092a <__aeabi_dmul+0x222>
 8000924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000928:	d113      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	d105      	bne.n	800093c <__aeabi_dmul+0x234>
 8000930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000934:	bf1c      	itt	ne
 8000936:	4610      	movne	r0, r2
 8000938:	4619      	movne	r1, r3
 800093a:	d10a      	bne.n	8000952 <__aeabi_dmul+0x24a>
 800093c:	ea81 0103 	eor.w	r1, r1, r3
 8000940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800094c:	f04f 0000 	mov.w	r0, #0
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800095a:	bd70      	pop	{r4, r5, r6, pc}

0800095c <__aeabi_ddiv>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800096a:	bf1d      	ittte	ne
 800096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000970:	ea94 0f0c 	teqne	r4, ip
 8000974:	ea95 0f0c 	teqne	r5, ip
 8000978:	f000 f8a7 	bleq	8000aca <__aeabi_ddiv+0x16e>
 800097c:	eba4 0405 	sub.w	r4, r4, r5
 8000980:	ea81 0e03 	eor.w	lr, r1, r3
 8000984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800098c:	f000 8088 	beq.w	8000aa0 <__aeabi_ddiv+0x144>
 8000990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009b4:	429d      	cmp	r5, r3
 80009b6:	bf08      	it	eq
 80009b8:	4296      	cmpeq	r6, r2
 80009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009c2:	d202      	bcs.n	80009ca <__aeabi_ddiv+0x6e>
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	1ab6      	subs	r6, r6, r2
 80009cc:	eb65 0503 	sbc.w	r5, r5, r3
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009de:	ebb6 0e02 	subs.w	lr, r6, r2
 80009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009e6:	bf22      	ittt	cs
 80009e8:	1ab6      	subcs	r6, r6, r2
 80009ea:	4675      	movcs	r5, lr
 80009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80009f0:	085b      	lsrs	r3, r3, #1
 80009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009fe:	bf22      	ittt	cs
 8000a00:	1ab6      	subcs	r6, r6, r2
 8000a02:	4675      	movcs	r5, lr
 8000a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a08:	085b      	lsrs	r3, r3, #1
 8000a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a16:	bf22      	ittt	cs
 8000a18:	1ab6      	subcs	r6, r6, r2
 8000a1a:	4675      	movcs	r5, lr
 8000a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a20:	085b      	lsrs	r3, r3, #1
 8000a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a2e:	bf22      	ittt	cs
 8000a30:	1ab6      	subcs	r6, r6, r2
 8000a32:	4675      	movcs	r5, lr
 8000a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a3c:	d018      	beq.n	8000a70 <__aeabi_ddiv+0x114>
 8000a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a5a:	d1c0      	bne.n	80009de <__aeabi_ddiv+0x82>
 8000a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a60:	d10b      	bne.n	8000a7a <__aeabi_ddiv+0x11e>
 8000a62:	ea41 0100 	orr.w	r1, r1, r0
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a6e:	e7b6      	b.n	80009de <__aeabi_ddiv+0x82>
 8000a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a74:	bf04      	itt	eq
 8000a76:	4301      	orreq	r1, r0
 8000a78:	2000      	moveq	r0, #0
 8000a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a7e:	bf88      	it	hi
 8000a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a84:	f63f aeaf 	bhi.w	80007e6 <__aeabi_dmul+0xde>
 8000a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a8c:	bf04      	itt	eq
 8000a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a96:	f150 0000 	adcs.w	r0, r0, #0
 8000a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}
 8000aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aac:	bfc2      	ittt	gt
 8000aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8000ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abc:	f04f 0e00 	mov.w	lr, #0
 8000ac0:	3c01      	subs	r4, #1
 8000ac2:	e690      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ac8:	e68d      	b.n	80007e6 <__aeabi_dmul+0xde>
 8000aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ace:	ea94 0f0c 	teq	r4, ip
 8000ad2:	bf08      	it	eq
 8000ad4:	ea95 0f0c 	teqeq	r5, ip
 8000ad8:	f43f af3b 	beq.w	8000952 <__aeabi_dmul+0x24a>
 8000adc:	ea94 0f0c 	teq	r4, ip
 8000ae0:	d10a      	bne.n	8000af8 <__aeabi_ddiv+0x19c>
 8000ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ae6:	f47f af34 	bne.w	8000952 <__aeabi_dmul+0x24a>
 8000aea:	ea95 0f0c 	teq	r5, ip
 8000aee:	f47f af25 	bne.w	800093c <__aeabi_dmul+0x234>
 8000af2:	4610      	mov	r0, r2
 8000af4:	4619      	mov	r1, r3
 8000af6:	e72c      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000af8:	ea95 0f0c 	teq	r5, ip
 8000afc:	d106      	bne.n	8000b0c <__aeabi_ddiv+0x1b0>
 8000afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b02:	f43f aefd 	beq.w	8000900 <__aeabi_dmul+0x1f8>
 8000b06:	4610      	mov	r0, r2
 8000b08:	4619      	mov	r1, r3
 8000b0a:	e722      	b.n	8000952 <__aeabi_dmul+0x24a>
 8000b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b16:	f47f aec5 	bne.w	80008a4 <__aeabi_dmul+0x19c>
 8000b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b1e:	f47f af0d 	bne.w	800093c <__aeabi_dmul+0x234>
 8000b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b26:	f47f aeeb 	bne.w	8000900 <__aeabi_dmul+0x1f8>
 8000b2a:	e712      	b.n	8000952 <__aeabi_dmul+0x24a>

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_f2iz>:
 8000b7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b84:	d30f      	bcc.n	8000ba6 <__aeabi_f2iz+0x2a>
 8000b86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_f2iz+0x30>
 8000b90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba0:	bf18      	it	ne
 8000ba2:	4240      	negne	r0, r0
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr
 8000bac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000bb0:	d101      	bne.n	8000bb6 <__aeabi_f2iz+0x3a>
 8000bb2:	0242      	lsls	r2, r0, #9
 8000bb4:	d105      	bne.n	8000bc2 <__aeabi_f2iz+0x46>
 8000bb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000bba:	bf08      	it	eq
 8000bbc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bee:	f000 fb37 	bl	8001260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f002 fb81 	bl	80032f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bf6:	f000 f8d5 	bl	8000da4 <main>
  bx lr
 8000bfa:	4770      	bx	lr
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c04:	08003390 	.word	0x08003390
  ldr r2, =_sbss
 8000c08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c0c:	200000c0 	.word	0x200000c0

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>
	...

08000c14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 0310 	add.w	r3, r7, #16
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c28:	4b59      	ldr	r3, [pc, #356]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a58      	ldr	r2, [pc, #352]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c2e:	f043 0320 	orr.w	r3, r3, #32
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b56      	ldr	r3, [pc, #344]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0320 	and.w	r3, r3, #32
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	4b53      	ldr	r3, [pc, #332]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	4a52      	ldr	r2, [pc, #328]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	6193      	str	r3, [r2, #24]
 8000c4c:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c4e:	699b      	ldr	r3, [r3, #24]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b4d      	ldr	r3, [pc, #308]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a4c      	ldr	r2, [pc, #304]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b4a      	ldr	r3, [pc, #296]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c70:	4b47      	ldr	r3, [pc, #284]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a46      	ldr	r2, [pc, #280]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c76:	f043 0308 	orr.w	r3, r3, #8
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b44      	ldr	r3, [pc, #272]	; (8000d90 <MX_GPIO_Init+0x17c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0308 	and.w	r3, r3, #8
 8000c84:	603b      	str	r3, [r7, #0]
 8000c86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TRIG_Pin|BEEP_Pin, GPIO_PIN_RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2109      	movs	r1, #9
 8000c8c:	4841      	ldr	r0, [pc, #260]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000c8e:	f000 fe2c 	bl	80018ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_MOTOR_GO_Pin|LED1_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2170      	movs	r1, #112	; 0x70
 8000c96:	4840      	ldr	r0, [pc, #256]	; (8000d98 <MX_GPIO_Init+0x184>)
 8000c98:	f000 fe27 	bl	80018ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_D3_Pin|LEFT_MOTOR_GO_Pin, GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	21c0      	movs	r1, #192	; 0xc0
 8000ca0:	483e      	ldr	r0, [pc, #248]	; (8000d9c <MX_GPIO_Init+0x188>)
 8000ca2:	f000 fe22 	bl	80018ea <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = TRIG_Pin|BEEP_Pin;
 8000ca6:	2309      	movs	r3, #9
 8000ca8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb6:	f107 0310 	add.w	r3, r7, #16
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4835      	ldr	r0, [pc, #212]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000cbe:	f000 fc69 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cc6:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <MX_GPIO_Init+0x18c>)
 8000cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	482f      	ldr	r0, [pc, #188]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000cd6:	f000 fc5d 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000cda:	2304      	movs	r3, #4
 8000cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4619      	mov	r1, r3
 8000cec:	4829      	ldr	r0, [pc, #164]	; (8000d94 <MX_GPIO_Init+0x180>)
 8000cee:	f000 fc51 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RIGHT_MOTOR_GO_Pin|LED1_Pin|LED_D4_Pin;
 8000cf2:	2370      	movs	r3, #112	; 0x70
 8000cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4619      	mov	r1, r3
 8000d08:	4823      	ldr	r0, [pc, #140]	; (8000d98 <MX_GPIO_Init+0x184>)
 8000d0a:	f000 fc43 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SEARCH_R_Pin|AVOID_LFET_Pin;
 8000d0e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	481d      	ldr	r0, [pc, #116]	; (8000d98 <MX_GPIO_Init+0x184>)
 8000d24:	f000 fc36 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SEARCH_L_Pin|AVOID_RIGHT_Pin;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4818      	ldr	r0, [pc, #96]	; (8000d9c <MX_GPIO_Init+0x188>)
 8000d3c:	f000 fc2a 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_D3_Pin;
 8000d40:	2340      	movs	r3, #64	; 0x40
 8000d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d44:	2301      	movs	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_D3_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 0310 	add.w	r3, r7, #16
 8000d54:	4619      	mov	r1, r3
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_GPIO_Init+0x188>)
 8000d58:	f000 fc1c 	bl	8001594 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LEFT_MOTOR_GO_Pin;
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d68:	2303      	movs	r3, #3
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LEFT_MOTOR_GO_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	480a      	ldr	r0, [pc, #40]	; (8000d9c <MX_GPIO_Init+0x188>)
 8000d74:	f000 fc0e 	bl	8001594 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	2007      	movs	r0, #7
 8000d7e:	f000 fbd2 	bl	8001526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d82:	2007      	movs	r0, #7
 8000d84:	f000 fbeb 	bl	800155e <HAL_NVIC_EnableIRQ>

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000
 8000d94:	40011000 	.word	0x40011000
 8000d98:	40010800 	.word	0x40010800
 8000d9c:	40010c00 	.word	0x40010c00
 8000da0:	10110000 	.word	0x10110000

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da8:	f000 fa60 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dac:	f000 f83c 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db0:	f7ff ff30 	bl	8000c14 <MX_GPIO_Init>
  MX_TIM4_Init();
 8000db4:	f000 f966 	bl	8001084 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000db8:	f000 f916 	bl	8000fe8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <main+0x7c>)
 8000dc0:	f001 fa5e 	bl	8002280 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 8000dc4:	210c      	movs	r1, #12
 8000dc6:	4816      	ldr	r0, [pc, #88]	; (8000e20 <main+0x7c>)
 8000dc8:	f001 fa5a 	bl	8002280 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  keyscan();
 8000dcc:	f002 f950 	bl	8003070 <keyscan>

//	SearchRun();	//循迹函数
//	AVoidRun();		//避障函数

	//printf("测到的距离值为： %d\n",UltrasonicWave_StartMeasure());
	if(UltrasonicWave_StartMeasure() < 40)
 8000dd0:	f002 f926 	bl	8003020 <UltrasonicWave_StartMeasure>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b27      	cmp	r3, #39	; 0x27
 8000dd8:	dc17      	bgt.n	8000e0a <main+0x66>
	{
		ZYSTM32_brake(500);
 8000dda:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dde:	f002 fa29 	bl	8003234 <ZYSTM32_brake>
		ZYSTM32_back(70,1000);
 8000de2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000de6:	2046      	movs	r0, #70	; 0x46
 8000de8:	f002 fa62 	bl	80032b0 <ZYSTM32_back>
		ZYSTM32_brake(500);
 8000dec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000df0:	f002 fa20 	bl	8003234 <ZYSTM32_brake>
		ZYSTM32_Right(70,500);
 8000df4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000df8:	2046      	movs	r0, #70	; 0x46
 8000dfa:	f002 fa3d 	bl	8003278 <ZYSTM32_Right>

		BEEP_SET;
 8000dfe:	2201      	movs	r2, #1
 8000e00:	2108      	movs	r1, #8
 8000e02:	4808      	ldr	r0, [pc, #32]	; (8000e24 <main+0x80>)
 8000e04:	f000 fd71 	bl	80018ea <HAL_GPIO_WritePin>
 8000e08:	e7e2      	b.n	8000dd0 <main+0x2c>
	}
	else
	{
		  ZYSTM32_run(70,1);
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2046      	movs	r0, #70	; 0x46
 8000e0e:	f002 f9f3 	bl	80031f8 <ZYSTM32_run>
		  BEEP_RESET;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2108      	movs	r1, #8
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <main+0x80>)
 8000e18:	f000 fd67 	bl	80018ea <HAL_GPIO_WritePin>
	if(UltrasonicWave_StartMeasure() < 40)
 8000e1c:	e7d8      	b.n	8000dd0 <main+0x2c>
 8000e1e:	bf00      	nop
 8000e20:	20000028 	.word	0x20000028
 8000e24:	40011000 	.word	0x40011000

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b090      	sub	sp, #64	; 0x40
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 0318 	add.w	r3, r7, #24
 8000e32:	2228      	movs	r2, #40	; 0x28
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f002 fa82 	bl	8003340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	605a      	str	r2, [r3, #4]
 8000e44:	609a      	str	r2, [r3, #8]
 8000e46:	60da      	str	r2, [r3, #12]
 8000e48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e6c:	f107 0318 	add.w	r3, r7, #24
 8000e70:	4618      	mov	r0, r3
 8000e72:	f000 fd75 	bl	8001960 <HAL_RCC_OscConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e7c:	f000 f844 	bl	8000f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e80:	230f      	movs	r3, #15
 8000e82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e84:	2302      	movs	r3, #2
 8000e86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2102      	movs	r1, #2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 ffe0 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000ea6:	f000 f82f 	bl	8000f08 <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3740      	adds	r7, #64	; 0x40
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us(uint32_t nus)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD = 9 * nus;	//systick 8分频       72MHz/8 = 9MHz
 8000ebc:	4911      	ldr	r1, [pc, #68]	; (8000f04 <delay_us+0x50>)
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	604b      	str	r3, [r1, #4]
	SysTick->VAL = 0x00;	//清空计数器
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <delay_us+0x50>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 0X01;		//使能，减到零是无动作，采用外部时钟源
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <delay_us+0x50>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
	do
	{
		temp = SysTick->CTRL;	//读取当前倒计数值
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <delay_us+0x50>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	60fb      	str	r3, [r7, #12]
	}while((temp&0x01)&&(!(temp&(1<<16))));//等待时间到达   SysTick->CTRL 的 0位位使能位，16位为count flag  使能位为0，count flag位为1则退出循环
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <delay_us+0x3a>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d0f2      	beq.n	8000ed4 <delay_us+0x20>
	SysTick->CTRL = 0X00;	//关闭计数器
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <delay_us+0x50>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
	SysTick->VAL = 0x00;	//清空计数器
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <delay_us+0x50>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f0c:	b672      	cpsid	i
}
 8000f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f10:	e7fe      	b.n	8000f10 <Error_Handler+0x8>
	...

08000f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	61d3      	str	r3, [r2, #28]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <HAL_MspInit+0x5c>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_MspInit+0x60>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_MspInit+0x60>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3714      	adds	r7, #20
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000

08000f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f7c:	e7fe      	b.n	8000f7c <NMI_Handler+0x4>

08000f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f82:	e7fe      	b.n	8000f82 <HardFault_Handler+0x4>

08000f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <MemManage_Handler+0x4>

08000f8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <BusFault_Handler+0x4>

08000f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <UsageFault_Handler+0x4>

08000f96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbe:	f000 f99b 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000fca:	2002      	movs	r0, #2
 8000fcc:	f000 fca6 	bl	800191c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <TIM2_IRQHandler+0x10>)
 8000fda:	f001 fa0b 	bl	80023f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000070 	.word	0x20000070

08000fe8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001004:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM2_Init+0x98>)
 8001006:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800100a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM2_Init+0x98>)
 800100e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001012:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM2_Init+0x98>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM2_Init+0x98>)
 800101c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001020:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_TIM2_Init+0x98>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_TIM2_Init+0x98>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <MX_TIM2_Init+0x98>)
 8001030:	f001 f87e 	bl	8002130 <HAL_TIM_Base_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800103a:	f7ff ff65 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001044:	f107 0308 	add.w	r3, r7, #8
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM2_Init+0x98>)
 800104c:	f001 fb98 	bl	8002780 <HAL_TIM_ConfigClockSource>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001056:	f7ff ff57 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001062:	463b      	mov	r3, r7
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM2_Init+0x98>)
 8001068:	f001 ff5c 	bl	8002f24 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001072:	f7ff ff49 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	20000070 	.word	0x20000070

08001084 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08e      	sub	sp, #56	; 0x38
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
 80010b0:	615a      	str	r2, [r3, #20]
 80010b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010b4:	4b32      	ldr	r3, [pc, #200]	; (8001180 <MX_TIM4_Init+0xfc>)
 80010b6:	4a33      	ldr	r2, [pc, #204]	; (8001184 <MX_TIM4_Init+0x100>)
 80010b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <MX_TIM4_Init+0xfc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <MX_TIM4_Init+0xfc>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 7200-1;
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <MX_TIM4_Init+0xfc>)
 80010c8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80010cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <MX_TIM4_Init+0xfc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	; (8001180 <MX_TIM4_Init+0xfc>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010da:	4829      	ldr	r0, [pc, #164]	; (8001180 <MX_TIM4_Init+0xfc>)
 80010dc:	f001 f828 	bl	8002130 <HAL_TIM_Base_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80010e6:	f7ff ff0f 	bl	8000f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010f4:	4619      	mov	r1, r3
 80010f6:	4822      	ldr	r0, [pc, #136]	; (8001180 <MX_TIM4_Init+0xfc>)
 80010f8:	f001 fb42 	bl	8002780 <HAL_TIM_ConfigClockSource>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001102:	f7ff ff01 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001106:	481e      	ldr	r0, [pc, #120]	; (8001180 <MX_TIM4_Init+0xfc>)
 8001108:	f001 f861 	bl	80021ce <HAL_TIM_PWM_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001112:	f7ff fef9 	bl	8000f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001116:	2300      	movs	r3, #0
 8001118:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800111e:	f107 0320 	add.w	r3, r7, #32
 8001122:	4619      	mov	r1, r3
 8001124:	4816      	ldr	r0, [pc, #88]	; (8001180 <MX_TIM4_Init+0xfc>)
 8001126:	f001 fefd 	bl	8002f24 <HAL_TIMEx_MasterConfigSynchronization>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001130:	f7ff feea 	bl	8000f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001134:	2370      	movs	r3, #112	; 0x70
 8001136:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2208      	movs	r2, #8
 8001148:	4619      	mov	r1, r3
 800114a:	480d      	ldr	r0, [pc, #52]	; (8001180 <MX_TIM4_Init+0xfc>)
 800114c:	f001 fa5a 	bl	8002604 <HAL_TIM_PWM_ConfigChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001156:	f7ff fed7 	bl	8000f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	220c      	movs	r2, #12
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	; (8001180 <MX_TIM4_Init+0xfc>)
 8001162:	f001 fa4f 	bl	8002604 <HAL_TIM_PWM_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800116c:	f7ff fecc 	bl	8000f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001170:	4803      	ldr	r0, [pc, #12]	; (8001180 <MX_TIM4_Init+0xfc>)
 8001172:	f000 f841 	bl	80011f8 <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3738      	adds	r7, #56	; 0x38
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000028 	.word	0x20000028
 8001184:	40000800 	.word	0x40000800

08001188 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001198:	d114      	bne.n	80011c4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119a:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_TIM_Base_MspInit+0x68>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	4a14      	ldr	r2, [pc, #80]	; (80011f0 <HAL_TIM_Base_MspInit+0x68>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	61d3      	str	r3, [r2, #28]
 80011a6:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HAL_TIM_Base_MspInit+0x68>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	201c      	movs	r0, #28
 80011b8:	f000 f9b5 	bl	8001526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011bc:	201c      	movs	r0, #28
 80011be:	f000 f9ce 	bl	800155e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80011c2:	e010      	b.n	80011e6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_TIM_Base_MspInit+0x6c>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10b      	bne.n	80011e6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_TIM_Base_MspInit+0x68>)
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	4a07      	ldr	r2, [pc, #28]	; (80011f0 <HAL_TIM_Base_MspInit+0x68>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	61d3      	str	r3, [r2, #28]
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_TIM_Base_MspInit+0x68>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40000800 	.word	0x40000800

080011f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b088      	sub	sp, #32
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0310 	add.w	r3, r7, #16
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM4)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_TIM_MspPostInit+0x5c>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d118      	bne.n	800124a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_TIM_MspPostInit+0x60>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	4a0e      	ldr	r2, [pc, #56]	; (8001258 <HAL_TIM_MspPostInit+0x60>)
 800121e:	f043 0308 	orr.w	r3, r3, #8
 8001222:	6193      	str	r3, [r2, #24]
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_TIM_MspPostInit+0x60>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LEFT_MOTOR_PWM_Pin|RIGHT_MOTOR_PWM_Pin;
 8001230:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001234:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	4619      	mov	r1, r3
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <HAL_TIM_MspPostInit+0x64>)
 8001246:	f000 f9a5 	bl	8001594 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800124a:	bf00      	nop
 800124c:	3720      	adds	r7, #32
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40000800 	.word	0x40000800
 8001258:	40021000 	.word	0x40021000
 800125c:	40010c00 	.word	0x40010c00

08001260 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001270:	4b08      	ldr	r3, [pc, #32]	; (8001294 <HAL_Init+0x28>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a07      	ldr	r2, [pc, #28]	; (8001294 <HAL_Init+0x28>)
 8001276:	f043 0310 	orr.w	r3, r3, #16
 800127a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127c:	2003      	movs	r0, #3
 800127e:	f000 f947 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001282:	200f      	movs	r0, #15
 8001284:	f000 f808 	bl	8001298 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001288:	f7ff fe44 	bl	8000f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40022000 	.word	0x40022000

08001298 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_InitTick+0x54>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <HAL_InitTick+0x58>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f95f 	bl	800157a <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00e      	b.n	80012e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b0f      	cmp	r3, #15
 80012ca:	d80a      	bhi.n	80012e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012cc:	2200      	movs	r2, #0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f000 f927 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d8:	4a06      	ldr	r2, [pc, #24]	; (80012f4 <HAL_InitTick+0x5c>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	e000      	b.n	80012e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000000 	.word	0x20000000
 80012f0:	20000008 	.word	0x20000008
 80012f4:	20000004 	.word	0x20000004

080012f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <HAL_IncTick+0x1c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x20>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_IncTick+0x20>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	20000008 	.word	0x20000008
 8001318:	200000b8 	.word	0x200000b8

0800131c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return uwTick;
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <HAL_GetTick+0x10>)
 8001322:	681b      	ldr	r3, [r3, #0]
}
 8001324:	4618      	mov	r0, r3
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	200000b8 	.word	0x200000b8

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff fff0 	bl	800131c <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffe0 	bl	800131c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	20000008 	.word	0x20000008

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	; (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_GetPriorityGrouping+0x18>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 0307 	and.w	r3, r3, #7
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db0b      	blt.n	8001406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	f003 021f 	and.w	r2, r3, #31
 80013f4:	4906      	ldr	r1, [pc, #24]	; (8001410 <__NVIC_EnableIRQ+0x34>)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	095b      	lsrs	r3, r3, #5
 80013fc:	2001      	movs	r0, #1
 80013fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	; (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	; (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	; 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff90 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff2d 	bl	8001378 <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff42 	bl	80013c0 <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff90 	bl	8001468 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5f 	bl	8001414 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff35 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa2 	bl	80014cc <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001594:	b480      	push	{r7}
 8001596:	b08b      	sub	sp, #44	; 0x2c
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e179      	b.n	800189c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015a8:	2201      	movs	r2, #1
 80015aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	69fa      	ldr	r2, [r7, #28]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	f040 8168 	bne.w	8001896 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4aa0      	ldr	r2, [pc, #640]	; (800184c <HAL_GPIO_Init+0x2b8>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d05e      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015d0:	4a9e      	ldr	r2, [pc, #632]	; (800184c <HAL_GPIO_Init+0x2b8>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d875      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015d6:	4a9e      	ldr	r2, [pc, #632]	; (8001850 <HAL_GPIO_Init+0x2bc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d058      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015dc:	4a9c      	ldr	r2, [pc, #624]	; (8001850 <HAL_GPIO_Init+0x2bc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d86f      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015e2:	4a9c      	ldr	r2, [pc, #624]	; (8001854 <HAL_GPIO_Init+0x2c0>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d052      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015e8:	4a9a      	ldr	r2, [pc, #616]	; (8001854 <HAL_GPIO_Init+0x2c0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d869      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015ee:	4a9a      	ldr	r2, [pc, #616]	; (8001858 <HAL_GPIO_Init+0x2c4>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d04c      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 80015f4:	4a98      	ldr	r2, [pc, #608]	; (8001858 <HAL_GPIO_Init+0x2c4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d863      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 80015fa:	4a98      	ldr	r2, [pc, #608]	; (800185c <HAL_GPIO_Init+0x2c8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d046      	beq.n	800168e <HAL_GPIO_Init+0xfa>
 8001600:	4a96      	ldr	r2, [pc, #600]	; (800185c <HAL_GPIO_Init+0x2c8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d85d      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 8001606:	2b12      	cmp	r3, #18
 8001608:	d82a      	bhi.n	8001660 <HAL_GPIO_Init+0xcc>
 800160a:	2b12      	cmp	r3, #18
 800160c:	d859      	bhi.n	80016c2 <HAL_GPIO_Init+0x12e>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <HAL_GPIO_Init+0x80>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	0800168f 	.word	0x0800168f
 8001618:	08001669 	.word	0x08001669
 800161c:	0800167b 	.word	0x0800167b
 8001620:	080016bd 	.word	0x080016bd
 8001624:	080016c3 	.word	0x080016c3
 8001628:	080016c3 	.word	0x080016c3
 800162c:	080016c3 	.word	0x080016c3
 8001630:	080016c3 	.word	0x080016c3
 8001634:	080016c3 	.word	0x080016c3
 8001638:	080016c3 	.word	0x080016c3
 800163c:	080016c3 	.word	0x080016c3
 8001640:	080016c3 	.word	0x080016c3
 8001644:	080016c3 	.word	0x080016c3
 8001648:	080016c3 	.word	0x080016c3
 800164c:	080016c3 	.word	0x080016c3
 8001650:	080016c3 	.word	0x080016c3
 8001654:	080016c3 	.word	0x080016c3
 8001658:	08001671 	.word	0x08001671
 800165c:	08001685 	.word	0x08001685
 8001660:	4a7f      	ldr	r2, [pc, #508]	; (8001860 <HAL_GPIO_Init+0x2cc>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001666:	e02c      	b.n	80016c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e029      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	3304      	adds	r3, #4
 8001676:	623b      	str	r3, [r7, #32]
          break;
 8001678:	e024      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	3308      	adds	r3, #8
 8001680:	623b      	str	r3, [r7, #32]
          break;
 8001682:	e01f      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	330c      	adds	r3, #12
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e01a      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d102      	bne.n	800169c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001696:	2304      	movs	r3, #4
 8001698:	623b      	str	r3, [r7, #32]
          break;
 800169a:	e013      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d105      	bne.n	80016b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016a4:	2308      	movs	r3, #8
 80016a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	611a      	str	r2, [r3, #16]
          break;
 80016ae:	e009      	b.n	80016c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016b0:	2308      	movs	r3, #8
 80016b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69fa      	ldr	r2, [r7, #28]
 80016b8:	615a      	str	r2, [r3, #20]
          break;
 80016ba:	e003      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e000      	b.n	80016c4 <HAL_GPIO_Init+0x130>
          break;
 80016c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	2bff      	cmp	r3, #255	; 0xff
 80016c8:	d801      	bhi.n	80016ce <HAL_GPIO_Init+0x13a>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	e001      	b.n	80016d2 <HAL_GPIO_Init+0x13e>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	2bff      	cmp	r3, #255	; 0xff
 80016d8:	d802      	bhi.n	80016e0 <HAL_GPIO_Init+0x14c>
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	e002      	b.n	80016e6 <HAL_GPIO_Init+0x152>
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	3b08      	subs	r3, #8
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	210f      	movs	r1, #15
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	fa01 f303 	lsl.w	r3, r1, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	401a      	ands	r2, r3
 80016f8:	6a39      	ldr	r1, [r7, #32]
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	431a      	orrs	r2, r3
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	f000 80c1 	beq.w	8001896 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001714:	4b53      	ldr	r3, [pc, #332]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	4a52      	ldr	r2, [pc, #328]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6193      	str	r3, [r2, #24]
 8001720:	4b50      	ldr	r3, [pc, #320]	; (8001864 <HAL_GPIO_Init+0x2d0>)
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800172c:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_GPIO_Init+0x2d4>)
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	220f      	movs	r2, #15
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a46      	ldr	r2, [pc, #280]	; (800186c <HAL_GPIO_Init+0x2d8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d01f      	beq.n	8001798 <HAL_GPIO_Init+0x204>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_GPIO_Init+0x2dc>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d019      	beq.n	8001794 <HAL_GPIO_Init+0x200>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4a44      	ldr	r2, [pc, #272]	; (8001874 <HAL_GPIO_Init+0x2e0>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d013      	beq.n	8001790 <HAL_GPIO_Init+0x1fc>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4a43      	ldr	r2, [pc, #268]	; (8001878 <HAL_GPIO_Init+0x2e4>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d00d      	beq.n	800178c <HAL_GPIO_Init+0x1f8>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	4a42      	ldr	r2, [pc, #264]	; (800187c <HAL_GPIO_Init+0x2e8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d007      	beq.n	8001788 <HAL_GPIO_Init+0x1f4>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a41      	ldr	r2, [pc, #260]	; (8001880 <HAL_GPIO_Init+0x2ec>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d101      	bne.n	8001784 <HAL_GPIO_Init+0x1f0>
 8001780:	2305      	movs	r3, #5
 8001782:	e00a      	b.n	800179a <HAL_GPIO_Init+0x206>
 8001784:	2306      	movs	r3, #6
 8001786:	e008      	b.n	800179a <HAL_GPIO_Init+0x206>
 8001788:	2304      	movs	r3, #4
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x206>
 800178c:	2303      	movs	r3, #3
 800178e:	e004      	b.n	800179a <HAL_GPIO_Init+0x206>
 8001790:	2302      	movs	r3, #2
 8001792:	e002      	b.n	800179a <HAL_GPIO_Init+0x206>
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_GPIO_Init+0x206>
 8001798:	2300      	movs	r3, #0
 800179a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800179c:	f002 0203 	and.w	r2, r2, #3
 80017a0:	0092      	lsls	r2, r2, #2
 80017a2:	4093      	lsls	r3, r2
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017aa:	492f      	ldr	r1, [pc, #188]	; (8001868 <HAL_GPIO_Init+0x2d4>)
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	089b      	lsrs	r3, r3, #2
 80017b0:	3302      	adds	r3, #2
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d006      	beq.n	80017d2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017c4:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	492e      	ldr	r1, [pc, #184]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	600b      	str	r3, [r1, #0]
 80017d0:	e006      	b.n	80017e0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	43db      	mvns	r3, r3
 80017da:	492a      	ldr	r1, [pc, #168]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017dc:	4013      	ands	r3, r2
 80017de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d006      	beq.n	80017fa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4924      	ldr	r1, [pc, #144]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
 80017f8:	e006      	b.n	8001808 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017fa:	4b22      	ldr	r3, [pc, #136]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	43db      	mvns	r3, r3
 8001802:	4920      	ldr	r1, [pc, #128]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 8001804:	4013      	ands	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d006      	beq.n	8001822 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001814:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	491a      	ldr	r1, [pc, #104]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 8001824:	689a      	ldr	r2, [r3, #8]
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	43db      	mvns	r3, r3
 800182a:	4916      	ldr	r1, [pc, #88]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 800182c:	4013      	ands	r3, r2
 800182e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d025      	beq.n	8001888 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	4910      	ldr	r1, [pc, #64]	; (8001884 <HAL_GPIO_Init+0x2f0>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	4313      	orrs	r3, r2
 8001846:	60cb      	str	r3, [r1, #12]
 8001848:	e025      	b.n	8001896 <HAL_GPIO_Init+0x302>
 800184a:	bf00      	nop
 800184c:	10320000 	.word	0x10320000
 8001850:	10310000 	.word	0x10310000
 8001854:	10220000 	.word	0x10220000
 8001858:	10210000 	.word	0x10210000
 800185c:	10120000 	.word	0x10120000
 8001860:	10110000 	.word	0x10110000
 8001864:	40021000 	.word	0x40021000
 8001868:	40010000 	.word	0x40010000
 800186c:	40010800 	.word	0x40010800
 8001870:	40010c00 	.word	0x40010c00
 8001874:	40011000 	.word	0x40011000
 8001878:	40011400 	.word	0x40011400
 800187c:	40011800 	.word	0x40011800
 8001880:	40011c00 	.word	0x40011c00
 8001884:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001888:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_GPIO_Init+0x324>)
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	43db      	mvns	r3, r3
 8001890:	4909      	ldr	r1, [pc, #36]	; (80018b8 <HAL_GPIO_Init+0x324>)
 8001892:	4013      	ands	r3, r2
 8001894:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	3301      	adds	r3, #1
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	fa22 f303 	lsr.w	r3, r2, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f47f ae7e 	bne.w	80015a8 <HAL_GPIO_Init+0x14>
  }
}
 80018ac:	bf00      	nop
 80018ae:	bf00      	nop
 80018b0:	372c      	adds	r7, #44	; 0x2c
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	40010400 	.word	0x40010400

080018bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	460b      	mov	r3, r1
 80018c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	4013      	ands	r3, r2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018d4:	2301      	movs	r3, #1
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e001      	b.n	80018de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bc80      	pop	{r7}
 80018e8:	4770      	bx	lr

080018ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ea:	b480      	push	{r7}
 80018ec:	b083      	sub	sp, #12
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]
 80018f6:	4613      	mov	r3, r2
 80018f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018fa:	787b      	ldrb	r3, [r7, #1]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001900:	887a      	ldrh	r2, [r7, #2]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001906:	e003      	b.n	8001910 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001908:	887b      	ldrh	r3, [r7, #2]
 800190a:	041a      	lsls	r2, r3, #16
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	611a      	str	r2, [r3, #16]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr
	...

0800191c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001934:	88fb      	ldrh	r3, [r7, #6]
 8001936:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	4618      	mov	r0, r3
 800193c:	f000 f806 	bl	800194c <HAL_GPIO_EXTI_Callback>
  }
}
 8001940:	bf00      	nop
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40010400 	.word	0x40010400

0800194c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e26c      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8087 	beq.w	8001a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001980:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b04      	cmp	r3, #4
 800198a:	d00c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800198c:	4b8f      	ldr	r3, [pc, #572]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d112      	bne.n	80019be <HAL_RCC_OscConfig+0x5e>
 8001998:	4b8c      	ldr	r3, [pc, #560]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d10b      	bne.n	80019be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	4b89      	ldr	r3, [pc, #548]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d06c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x12c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d168      	bne.n	8001a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e246      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x76>
 80019c8:	4b80      	ldr	r3, [pc, #512]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a7f      	ldr	r2, [pc, #508]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e02e      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x98>
 80019de:	4b7b      	ldr	r3, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a7a      	ldr	r2, [pc, #488]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b78      	ldr	r3, [pc, #480]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a77      	ldr	r2, [pc, #476]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0xbc>
 8001a02:	4b72      	ldr	r3, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a71      	ldr	r2, [pc, #452]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 8001a1c:	4b6b      	ldr	r3, [pc, #428]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6a      	ldr	r2, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a67      	ldr	r2, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc6e 	bl	800131c <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fc6a 	bl	800131c <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e1fa      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b5d      	ldr	r3, [pc, #372]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xe4>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc5a 	bl	800131c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fc56 	bl	800131c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1e6      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x10c>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d063      	beq.n	8001b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00b      	beq.n	8001abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d11c      	bne.n	8001aec <HAL_RCC_OscConfig+0x18c>
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d116      	bne.n	8001aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x176>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e1ba      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4939      	ldr	r1, [pc, #228]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	e03a      	b.n	8001b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCC_OscConfig+0x270>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fc0f 	bl	800131c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff fc0b 	bl	800131c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e19b      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4927      	ldr	r1, [pc, #156]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
 8001b34:	e015      	b.n	8001b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_RCC_OscConfig+0x270>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fbee 	bl	800131c <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff fbea 	bl	800131c <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e17a      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d03a      	beq.n	8001be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d019      	beq.n	8001baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fbce 	bl	800131c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff fbca 	bl	800131c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e15a      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f000 faa6 	bl	80020f4 <RCC_Delay>
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff fbb4 	bl	800131c <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb6:	e00f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fbb0 	bl	800131c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d908      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e140      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	42420000 	.word	0x42420000
 8001bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b9e      	ldr	r3, [pc, #632]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e9      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a6 	beq.w	8001d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b97      	ldr	r3, [pc, #604]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b94      	ldr	r3, [pc, #592]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a93      	ldr	r2, [pc, #588]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b91      	ldr	r3, [pc, #580]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b8e      	ldr	r3, [pc, #568]	; (8001e58 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2a:	4b8b      	ldr	r3, [pc, #556]	; (8001e58 <HAL_RCC_OscConfig+0x4f8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a8a      	ldr	r2, [pc, #552]	; (8001e58 <HAL_RCC_OscConfig+0x4f8>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fb71 	bl	800131c <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff fb6d 	bl	800131c <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b64      	cmp	r3, #100	; 0x64
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e0fd      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x312>
 8001c64:	4b7b      	ldr	r3, [pc, #492]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a7a      	ldr	r2, [pc, #488]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	e02d      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x334>
 8001c7a:	4b76      	ldr	r3, [pc, #472]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a75      	ldr	r2, [pc, #468]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6213      	str	r3, [r2, #32]
 8001c86:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a72      	ldr	r2, [pc, #456]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	e01c      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x356>
 8001c9c:	4b6d      	ldr	r3, [pc, #436]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a6c      	ldr	r2, [pc, #432]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	4b6a      	ldr	r3, [pc, #424]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e00b      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001cb6:	4b67      	ldr	r3, [pc, #412]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a66      	ldr	r2, [pc, #408]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b64      	ldr	r3, [pc, #400]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a63      	ldr	r2, [pc, #396]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d015      	beq.n	8001d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fb21 	bl	800131c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7ff fb1d 	bl	800131c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0ab      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	4b57      	ldr	r3, [pc, #348]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ee      	beq.n	8001cde <HAL_RCC_OscConfig+0x37e>
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff fb0b 	bl	800131c <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff fb07 	bl	800131c <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e095      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	4b4c      	ldr	r3, [pc, #304]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b48      	ldr	r3, [pc, #288]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a47      	ldr	r2, [pc, #284]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8081 	beq.w	8001e4a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d48:	4b42      	ldr	r3, [pc, #264]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d061      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d146      	bne.n	8001dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b3f      	ldr	r3, [pc, #252]	; (8001e5c <HAL_RCC_OscConfig+0x4fc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fadb 	bl	800131c <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff fad7 	bl	800131c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e067      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	4b35      	ldr	r3, [pc, #212]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d108      	bne.n	8001da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d92:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	492d      	ldr	r1, [pc, #180]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da4:	4b2b      	ldr	r3, [pc, #172]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a19      	ldr	r1, [r3, #32]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	430b      	orrs	r3, r1
 8001db6:	4927      	ldr	r1, [pc, #156]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_RCC_OscConfig+0x4fc>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff faab 	bl	800131c <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7ff faa7 	bl	800131c <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e037      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x46a>
 8001de8:	e02f      	b.n	8001e4a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b1c      	ldr	r3, [pc, #112]	; (8001e5c <HAL_RCC_OscConfig+0x4fc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fa94 	bl	800131c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fa90 	bl	800131c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e020      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x498>
 8001e16:	e018      	b.n	8001e4a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e013      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40007000 	.word	0x40007000
 8001e5c:	42420060 	.word	0x42420060

08001e60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0d0      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b6a      	ldr	r3, [pc, #424]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b67      	ldr	r3, [pc, #412]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4965      	ldr	r1, [pc, #404]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b63      	ldr	r3, [pc, #396]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b8      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d020      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ebc:	4b59      	ldr	r3, [pc, #356]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ec6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed4:	4b53      	ldr	r3, [pc, #332]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a52      	ldr	r2, [pc, #328]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ede:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee0:	4b50      	ldr	r3, [pc, #320]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	494d      	ldr	r1, [pc, #308]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d040      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d107      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d115      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e07f      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e073      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e06b      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3e:	4b39      	ldr	r3, [pc, #228]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f023 0203 	bic.w	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4936      	ldr	r1, [pc, #216]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f50:	f7ff f9e4 	bl	800131c <HAL_GetTick>
 8001f54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f56:	e00a      	b.n	8001f6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f58:	f7ff f9e0 	bl	800131c <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e053      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 020c 	and.w	r2, r3, #12
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d1eb      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f80:	4b27      	ldr	r3, [pc, #156]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d210      	bcs.n	8001fb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b24      	ldr	r3, [pc, #144]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4922      	ldr	r1, [pc, #136]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e032      	b.n	8002016 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fda:	4b12      	ldr	r3, [pc, #72]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	490e      	ldr	r1, [pc, #56]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fee:	f000 f821 	bl	8002034 <HAL_RCC_GetSysClockFreq>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	490a      	ldr	r1, [pc, #40]	; (8002028 <HAL_RCC_ClockConfig+0x1c8>)
 8002000:	5ccb      	ldrb	r3, [r1, r3]
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	4a09      	ldr	r2, [pc, #36]	; (800202c <HAL_RCC_ClockConfig+0x1cc>)
 8002008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1d0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f942 	bl	8001298 <HAL_InitTick>

  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	40022000 	.word	0x40022000
 8002024:	40021000 	.word	0x40021000
 8002028:	08003378 	.word	0x08003378
 800202c:	20000000 	.word	0x20000000
 8002030:	20000004 	.word	0x20000004

08002034 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002034:	b490      	push	{r4, r7}
 8002036:	b08a      	sub	sp, #40	; 0x28
 8002038:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800203a:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800203c:	1d3c      	adds	r4, r7, #4
 800203e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002044:	f240 2301 	movw	r3, #513	; 0x201
 8002048:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204a:	2300      	movs	r3, #0
 800204c:	61fb      	str	r3, [r7, #28]
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800205e:	4b22      	ldr	r3, [pc, #136]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d002      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0x40>
 800206e:	2b08      	cmp	r3, #8
 8002070:	d003      	beq.n	800207a <HAL_RCC_GetSysClockFreq+0x46>
 8002072:	e02d      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002074:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8002076:	623b      	str	r3, [r7, #32]
      break;
 8002078:	e02d      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	0c9b      	lsrs	r3, r3, #18
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002086:	4413      	add	r3, r2
 8002088:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800208c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d013      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002098:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0c5b      	lsrs	r3, r3, #17
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020a6:	4413      	add	r3, r2
 80020a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b2:	fb02 f203 	mul.w	r2, r2, r3
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	e004      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	623b      	str	r3, [r7, #32]
      break;
 80020ce:	e002      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d2:	623b      	str	r3, [r7, #32]
      break;
 80020d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc90      	pop	{r4, r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	08003368 	.word	0x08003368
 80020e8:	40021000 	.word	0x40021000
 80020ec:	007a1200 	.word	0x007a1200
 80020f0:	003d0900 	.word	0x003d0900

080020f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020fc:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <RCC_Delay+0x34>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0a      	ldr	r2, [pc, #40]	; (800212c <RCC_Delay+0x38>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0a5b      	lsrs	r3, r3, #9
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002110:	bf00      	nop
  }
  while (Delay --);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1e5a      	subs	r2, r3, #1
 8002116:	60fa      	str	r2, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f9      	bne.n	8002110 <RCC_Delay+0x1c>
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	bc80      	pop	{r7}
 8002126:	4770      	bx	lr
 8002128:	20000000 	.word	0x20000000
 800212c:	10624dd3 	.word	0x10624dd3

08002130 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e041      	b.n	80021c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d106      	bne.n	800215c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f7ff f816 	bl	8001188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	3304      	adds	r3, #4
 800216c:	4619      	mov	r1, r3
 800216e:	4610      	mov	r0, r2
 8002170:	f000 fbf8 	bl	8002964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e041      	b.n	8002264 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d106      	bne.n	80021fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f839 	bl	800226c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2202      	movs	r2, #2
 80021fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3304      	adds	r3, #4
 800220a:	4619      	mov	r1, r3
 800220c:	4610      	mov	r0, r2
 800220e:	f000 fba9 	bl	8002964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2201      	movs	r2, #1
 800224e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2201      	movs	r2, #1
 8002256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
	...

08002280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d109      	bne.n	80022a4 <HAL_TIM_PWM_Start+0x24>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	e022      	b.n	80022ea <HAL_TIM_PWM_Start+0x6a>
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	d109      	bne.n	80022be <HAL_TIM_PWM_Start+0x3e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	bf14      	ite	ne
 80022b6:	2301      	movne	r3, #1
 80022b8:	2300      	moveq	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	e015      	b.n	80022ea <HAL_TIM_PWM_Start+0x6a>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d109      	bne.n	80022d8 <HAL_TIM_PWM_Start+0x58>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	e008      	b.n	80022ea <HAL_TIM_PWM_Start+0x6a>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	bf14      	ite	ne
 80022e4:	2301      	movne	r3, #1
 80022e6:	2300      	moveq	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e072      	b.n	80023d8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d104      	bne.n	8002302 <HAL_TIM_PWM_Start+0x82>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002300:	e013      	b.n	800232a <HAL_TIM_PWM_Start+0xaa>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b04      	cmp	r3, #4
 8002306:	d104      	bne.n	8002312 <HAL_TIM_PWM_Start+0x92>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2202      	movs	r2, #2
 800230c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002310:	e00b      	b.n	800232a <HAL_TIM_PWM_Start+0xaa>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b08      	cmp	r3, #8
 8002316:	d104      	bne.n	8002322 <HAL_TIM_PWM_Start+0xa2>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002320:	e003      	b.n	800232a <HAL_TIM_PWM_Start+0xaa>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	6839      	ldr	r1, [r7, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f000 fdd2 	bl	8002edc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a28      	ldr	r2, [pc, #160]	; (80023e0 <HAL_TIM_PWM_Start+0x160>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d004      	beq.n	800234c <HAL_TIM_PWM_Start+0xcc>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a27      	ldr	r2, [pc, #156]	; (80023e4 <HAL_TIM_PWM_Start+0x164>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d101      	bne.n	8002350 <HAL_TIM_PWM_Start+0xd0>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <HAL_TIM_PWM_Start+0xd2>
 8002350:	2300      	movs	r3, #0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1d      	ldr	r2, [pc, #116]	; (80023e0 <HAL_TIM_PWM_Start+0x160>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d018      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x122>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1b      	ldr	r2, [pc, #108]	; (80023e4 <HAL_TIM_PWM_Start+0x164>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d013      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x122>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002382:	d00e      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x122>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a17      	ldr	r2, [pc, #92]	; (80023e8 <HAL_TIM_PWM_Start+0x168>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d009      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x122>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a16      	ldr	r2, [pc, #88]	; (80023ec <HAL_TIM_PWM_Start+0x16c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d004      	beq.n	80023a2 <HAL_TIM_PWM_Start+0x122>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a14      	ldr	r2, [pc, #80]	; (80023f0 <HAL_TIM_PWM_Start+0x170>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d111      	bne.n	80023c6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2b06      	cmp	r3, #6
 80023b2:	d010      	beq.n	80023d6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f042 0201 	orr.w	r2, r2, #1
 80023c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023c4:	e007      	b.n	80023d6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40012c00 	.word	0x40012c00
 80023e4:	40013400 	.word	0x40013400
 80023e8:	40000400 	.word	0x40000400
 80023ec:	40000800 	.word	0x40000800
 80023f0:	40000c00 	.word	0x40000c00

080023f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b02      	cmp	r3, #2
 8002408:	d122      	bne.n	8002450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b02      	cmp	r3, #2
 8002416:	d11b      	bne.n	8002450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f06f 0202 	mvn.w	r2, #2
 8002420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fa78 	bl	800292c <HAL_TIM_IC_CaptureCallback>
 800243c:	e005      	b.n	800244a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fa6b 	bl	800291a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 fa7a 	bl	800293e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b04      	cmp	r3, #4
 800245c:	d122      	bne.n	80024a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b04      	cmp	r3, #4
 800246a:	d11b      	bne.n	80024a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0204 	mvn.w	r2, #4
 8002474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fa4e 	bl	800292c <HAL_TIM_IC_CaptureCallback>
 8002490:	e005      	b.n	800249e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fa41 	bl	800291a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fa50 	bl	800293e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0308 	and.w	r3, r3, #8
 80024ae:	2b08      	cmp	r3, #8
 80024b0:	d122      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d11b      	bne.n	80024f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0208 	mvn.w	r2, #8
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2204      	movs	r2, #4
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 fa24 	bl	800292c <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fa17 	bl	800291a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fa26 	bl	800293e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b10      	cmp	r3, #16
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b10      	cmp	r3, #16
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0210 	mvn.w	r2, #16
 800251c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2208      	movs	r2, #8
 8002522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f9fa 	bl	800292c <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f9ed 	bl	800291a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f9fc 	bl	800293e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d10e      	bne.n	8002578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0201 	mvn.w	r2, #1
 8002570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f9c8 	bl	8002908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d10e      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	2b80      	cmp	r3, #128	; 0x80
 8002592:	d107      	bne.n	80025a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800259c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fd35 	bl	800300e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d10e      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025bc:	2b40      	cmp	r3, #64	; 0x40
 80025be:	d107      	bne.n	80025d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f9c0 	bl	8002950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d10e      	bne.n	80025fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0320 	and.w	r3, r3, #32
 80025e8:	2b20      	cmp	r3, #32
 80025ea:	d107      	bne.n	80025fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0220 	mvn.w	r2, #32
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 fd00 	bl	8002ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}

08002604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800261a:	2302      	movs	r3, #2
 800261c:	e0ac      	b.n	8002778 <HAL_TIM_PWM_ConfigChannel+0x174>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f200 809f 	bhi.w	800276c <HAL_TIM_PWM_ConfigChannel+0x168>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002669 	.word	0x08002669
 8002638:	0800276d 	.word	0x0800276d
 800263c:	0800276d 	.word	0x0800276d
 8002640:	0800276d 	.word	0x0800276d
 8002644:	080026a9 	.word	0x080026a9
 8002648:	0800276d 	.word	0x0800276d
 800264c:	0800276d 	.word	0x0800276d
 8002650:	0800276d 	.word	0x0800276d
 8002654:	080026eb 	.word	0x080026eb
 8002658:	0800276d 	.word	0x0800276d
 800265c:	0800276d 	.word	0x0800276d
 8002660:	0800276d 	.word	0x0800276d
 8002664:	0800272b 	.word	0x0800272b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f9f2 	bl	8002a58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0208 	orr.w	r2, r2, #8
 8002682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6999      	ldr	r1, [r3, #24]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	619a      	str	r2, [r3, #24]
      break;
 80026a6:	e062      	b.n	800276e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68b9      	ldr	r1, [r7, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fa42 	bl	8002b38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699a      	ldr	r2, [r3, #24]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6999      	ldr	r1, [r3, #24]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	021a      	lsls	r2, r3, #8
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]
      break;
 80026e8:	e041      	b.n	800276e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fa95 	bl	8002c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0208 	orr.w	r2, r2, #8
 8002704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0204 	bic.w	r2, r2, #4
 8002714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69d9      	ldr	r1, [r3, #28]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	430a      	orrs	r2, r1
 8002726:	61da      	str	r2, [r3, #28]
      break;
 8002728:	e021      	b.n	800276e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fae9 	bl	8002d08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69da      	ldr	r2, [r3, #28]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	69da      	ldr	r2, [r3, #28]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69d9      	ldr	r1, [r3, #28]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	021a      	lsls	r2, r3, #8
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	61da      	str	r2, [r3, #28]
      break;
 800276a:	e000      	b.n	800276e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800276c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002790:	2b01      	cmp	r3, #1
 8002792:	d101      	bne.n	8002798 <HAL_TIM_ConfigClockSource+0x18>
 8002794:	2302      	movs	r3, #2
 8002796:	e0b3      	b.n	8002900 <HAL_TIM_ConfigClockSource+0x180>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d0:	d03e      	beq.n	8002850 <HAL_TIM_ConfigClockSource+0xd0>
 80027d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027d6:	f200 8087 	bhi.w	80028e8 <HAL_TIM_ConfigClockSource+0x168>
 80027da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027de:	f000 8085 	beq.w	80028ec <HAL_TIM_ConfigClockSource+0x16c>
 80027e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027e6:	d87f      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x168>
 80027e8:	2b70      	cmp	r3, #112	; 0x70
 80027ea:	d01a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0xa2>
 80027ec:	2b70      	cmp	r3, #112	; 0x70
 80027ee:	d87b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x168>
 80027f0:	2b60      	cmp	r3, #96	; 0x60
 80027f2:	d050      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0x116>
 80027f4:	2b60      	cmp	r3, #96	; 0x60
 80027f6:	d877      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x168>
 80027f8:	2b50      	cmp	r3, #80	; 0x50
 80027fa:	d03c      	beq.n	8002876 <HAL_TIM_ConfigClockSource+0xf6>
 80027fc:	2b50      	cmp	r3, #80	; 0x50
 80027fe:	d873      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x168>
 8002800:	2b40      	cmp	r3, #64	; 0x40
 8002802:	d058      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x136>
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d86f      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x168>
 8002808:	2b30      	cmp	r3, #48	; 0x30
 800280a:	d064      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x156>
 800280c:	2b30      	cmp	r3, #48	; 0x30
 800280e:	d86b      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x168>
 8002810:	2b20      	cmp	r3, #32
 8002812:	d060      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x156>
 8002814:	2b20      	cmp	r3, #32
 8002816:	d867      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x168>
 8002818:	2b00      	cmp	r3, #0
 800281a:	d05c      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x156>
 800281c:	2b10      	cmp	r3, #16
 800281e:	d05a      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002820:	e062      	b.n	80028e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6899      	ldr	r1, [r3, #8]
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f000 fb34 	bl	8002e9e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002844:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	609a      	str	r2, [r3, #8]
      break;
 800284e:	e04e      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6899      	ldr	r1, [r3, #8]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	f000 fb1d 	bl	8002e9e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002872:	609a      	str	r2, [r3, #8]
      break;
 8002874:	e03b      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	461a      	mov	r2, r3
 8002884:	f000 fa94 	bl	8002db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2150      	movs	r1, #80	; 0x50
 800288e:	4618      	mov	r0, r3
 8002890:	f000 faeb 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 8002894:	e02b      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 fab2 	bl	8002e0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2160      	movs	r1, #96	; 0x60
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 fadb 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 80028b4:	e01b      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 fa74 	bl	8002db0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2140      	movs	r1, #64	; 0x40
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 facb 	bl	8002e6a <TIM_ITRx_SetConfig>
      break;
 80028d4:	e00b      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f000 fac2 	bl	8002e6a <TIM_ITRx_SetConfig>
        break;
 80028e6:	e002      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028e8:	bf00      	nop
 80028ea:	e000      	b.n	80028ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80028ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	bc80      	pop	{r7}
 800293c:	4770      	bx	lr

0800293e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr

08002950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
	...

08002964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a33      	ldr	r2, [pc, #204]	; (8002a44 <TIM_Base_SetConfig+0xe0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d013      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a32      	ldr	r2, [pc, #200]	; (8002a48 <TIM_Base_SetConfig+0xe4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d00f      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800298a:	d00b      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a2f      	ldr	r2, [pc, #188]	; (8002a4c <TIM_Base_SetConfig+0xe8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d007      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a2e      	ldr	r2, [pc, #184]	; (8002a50 <TIM_Base_SetConfig+0xec>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d003      	beq.n	80029a4 <TIM_Base_SetConfig+0x40>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a2d      	ldr	r2, [pc, #180]	; (8002a54 <TIM_Base_SetConfig+0xf0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d108      	bne.n	80029b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a22      	ldr	r2, [pc, #136]	; (8002a44 <TIM_Base_SetConfig+0xe0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d013      	beq.n	80029e6 <TIM_Base_SetConfig+0x82>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a21      	ldr	r2, [pc, #132]	; (8002a48 <TIM_Base_SetConfig+0xe4>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00f      	beq.n	80029e6 <TIM_Base_SetConfig+0x82>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029cc:	d00b      	beq.n	80029e6 <TIM_Base_SetConfig+0x82>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a1e      	ldr	r2, [pc, #120]	; (8002a4c <TIM_Base_SetConfig+0xe8>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d007      	beq.n	80029e6 <TIM_Base_SetConfig+0x82>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <TIM_Base_SetConfig+0xec>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d003      	beq.n	80029e6 <TIM_Base_SetConfig+0x82>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a1c      	ldr	r2, [pc, #112]	; (8002a54 <TIM_Base_SetConfig+0xf0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d108      	bne.n	80029f8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a09      	ldr	r2, [pc, #36]	; (8002a44 <TIM_Base_SetConfig+0xe0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d003      	beq.n	8002a2c <TIM_Base_SetConfig+0xc8>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a08      	ldr	r2, [pc, #32]	; (8002a48 <TIM_Base_SetConfig+0xe4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d103      	bne.n	8002a34 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	615a      	str	r2, [r3, #20]
}
 8002a3a:	bf00      	nop
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40013400 	.word	0x40013400
 8002a4c:	40000400 	.word	0x40000400
 8002a50:	40000800 	.word	0x40000800
 8002a54:	40000c00 	.word	0x40000c00

08002a58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	f023 0201 	bic.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 0302 	bic.w	r3, r3, #2
 8002aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a20      	ldr	r2, [pc, #128]	; (8002b30 <TIM_OC1_SetConfig+0xd8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_OC1_SetConfig+0x64>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <TIM_OC1_SetConfig+0xdc>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10c      	bne.n	8002ad6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0308 	bic.w	r3, r3, #8
 8002ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f023 0304 	bic.w	r3, r3, #4
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <TIM_OC1_SetConfig+0xd8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_OC1_SetConfig+0x8e>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <TIM_OC1_SetConfig+0xdc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d111      	bne.n	8002b0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40012c00 	.word	0x40012c00
 8002b34:	40013400 	.word	0x40013400

08002b38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	f023 0210 	bic.w	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	68fa      	ldr	r2, [r7, #12]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f023 0320 	bic.w	r3, r3, #32
 8002b82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <TIM_OC2_SetConfig+0xe0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d003      	beq.n	8002ba0 <TIM_OC2_SetConfig+0x68>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <TIM_OC2_SetConfig+0xe4>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10d      	bne.n	8002bbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <TIM_OC2_SetConfig+0xe0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <TIM_OC2_SetConfig+0x94>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <TIM_OC2_SetConfig+0xe4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d113      	bne.n	8002bf4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	bf00      	nop
 8002c10:	371c      	adds	r7, #28
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	40013400 	.word	0x40013400

08002c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	021b      	lsls	r3, r3, #8
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <TIM_OC3_SetConfig+0xe0>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <TIM_OC3_SetConfig+0x66>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <TIM_OC3_SetConfig+0xe4>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d10d      	bne.n	8002ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	021b      	lsls	r3, r3, #8
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <TIM_OC3_SetConfig+0xe0>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d003      	beq.n	8002cb2 <TIM_OC3_SetConfig+0x92>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <TIM_OC3_SetConfig+0xe4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d113      	bne.n	8002cda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	621a      	str	r2, [r3, #32]
}
 8002cf4:	bf00      	nop
 8002cf6:	371c      	adds	r7, #28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bc80      	pop	{r7}
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40012c00 	.word	0x40012c00
 8002d04:	40013400 	.word	0x40013400

08002d08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	031b      	lsls	r3, r3, #12
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <TIM_OC4_SetConfig+0xa0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d003      	beq.n	8002d70 <TIM_OC4_SetConfig+0x68>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <TIM_OC4_SetConfig+0xa4>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d109      	bne.n	8002d84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	019b      	lsls	r3, r3, #6
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	621a      	str	r2, [r3, #32]
}
 8002d9e:	bf00      	nop
 8002da0:	371c      	adds	r7, #28
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40013400 	.word	0x40013400

08002db0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f023 0201 	bic.w	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 030a 	bic.w	r3, r3, #10
 8002dec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dee:	697a      	ldr	r2, [r7, #20]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	621a      	str	r2, [r3, #32]
}
 8002e02:	bf00      	nop
 8002e04:	371c      	adds	r7, #28
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b087      	sub	sp, #28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1b      	ldr	r3, [r3, #32]
 8002e1c:	f023 0210 	bic.w	r2, r3, #16
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e36:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	031b      	lsls	r3, r3, #12
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e48:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	693a      	ldr	r2, [r7, #16]
 8002e5e:	621a      	str	r2, [r3, #32]
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b085      	sub	sp, #20
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e82:	683a      	ldr	r2, [r7, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f043 0307 	orr.w	r3, r3, #7
 8002e8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	609a      	str	r2, [r3, #8]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b087      	sub	sp, #28
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
 8002eaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	021a      	lsls	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	609a      	str	r2, [r3, #8]
}
 8002ed2:	bf00      	nop
 8002ed4:	371c      	adds	r7, #28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bc80      	pop	{r7}
 8002eda:	4770      	bx	lr

08002edc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2201      	movs	r2, #1
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6a1a      	ldr	r2, [r3, #32]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	43db      	mvns	r3, r3
 8002efe:	401a      	ands	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6a1a      	ldr	r2, [r3, #32]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f003 031f 	and.w	r3, r3, #31
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	431a      	orrs	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bc80      	pop	{r7}
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d101      	bne.n	8002f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	e050      	b.n	8002fde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a1b      	ldr	r2, [pc, #108]	; (8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d018      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a19      	ldr	r2, [pc, #100]	; (8002fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d013      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d00e      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a15      	ldr	r2, [pc, #84]	; (8002ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d009      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d004      	beq.n	8002fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d10c      	bne.n	8002fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40013400 	.word	0x40013400
 8002ff0:	40000400 	.word	0x40000400
 8002ff4:	40000800 	.word	0x40000800
 8002ff8:	40000c00 	.word	0x40000c00

08002ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <UltrasonicWave_StartMeasure>:
 * 	描述：	开始测距，发送一个>10us的脉冲，然后测量返回的高电平时间
 * 	输入：无
 * 	输出：无
 */
int	UltrasonicWave_StartMeasure(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
	int u_temp;
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, SET);	//送>10us的高电平
 8003026:	2201      	movs	r2, #1
 8003028:	2101      	movs	r1, #1
 800302a:	480e      	ldr	r0, [pc, #56]	; (8003064 <UltrasonicWave_StartMeasure+0x44>)
 800302c:	f7fe fc5d 	bl	80018ea <HAL_GPIO_WritePin>
	delay_us(20);
 8003030:	2014      	movs	r0, #20
 8003032:	f7fd ff3f 	bl	8000eb4 <delay_us>
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, RESET);
 8003036:	2200      	movs	r2, #0
 8003038:	2101      	movs	r1, #1
 800303a:	480a      	ldr	r0, [pc, #40]	; (8003064 <UltrasonicWave_StartMeasure+0x44>)
 800303c:	f7fe fc55 	bl	80018ea <HAL_GPIO_WritePin>
	u_temp = UltrasonicWave_Distance * 10;
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <UltrasonicWave_StartMeasure+0x48>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4909      	ldr	r1, [pc, #36]	; (800306c <UltrasonicWave_StartMeasure+0x4c>)
 8003046:	4618      	mov	r0, r3
 8003048:	f7fd f8ee 	bl	8000228 <__aeabi_fmul>
 800304c:	4603      	mov	r3, r0
 800304e:	4618      	mov	r0, r3
 8003050:	f7fd fd94 	bl	8000b7c <__aeabi_f2iz>
 8003054:	4603      	mov	r3, r0
 8003056:	607b      	str	r3, [r7, #4]
	return u_temp;
 8003058:	687b      	ldr	r3, [r7, #4]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40011000 	.word	0x40011000
 8003068:	200000bc 	.word	0x200000bc
 800306c:	41200000 	.word	0x41200000

08003070 <keyscan>:
#include "keyscan.h"
#include "main.h"

void keyscan()
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
	int val;
	val = KEY; //读取按键
 8003076:	2104      	movs	r1, #4
 8003078:	481e      	ldr	r0, [pc, #120]	; (80030f4 <keyscan+0x84>)
 800307a:	f7fe fc1f 	bl	80018bc <HAL_GPIO_ReadPin>
 800307e:	4603      	mov	r3, r0
 8003080:	607b      	str	r3, [r7, #4]
	while(!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))	//当按键没有被按下时,一直循环
 8003082:	e005      	b.n	8003090 <keyscan+0x20>
	{
		val = KEY;
 8003084:	2104      	movs	r1, #4
 8003086:	481b      	ldr	r0, [pc, #108]	; (80030f4 <keyscan+0x84>)
 8003088:	f7fe fc18 	bl	80018bc <HAL_GPIO_ReadPin>
 800308c:	4603      	mov	r3, r0
 800308e:	607b      	str	r3, [r7, #4]
	while(!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))	//当按键没有被按下时,一直循环
 8003090:	2104      	movs	r1, #4
 8003092:	4818      	ldr	r0, [pc, #96]	; (80030f4 <keyscan+0x84>)
 8003094:	f7fe fc12 	bl	80018bc <HAL_GPIO_ReadPin>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0f2      	beq.n	8003084 <keyscan+0x14>
	}
	while(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))		//当按键被按下时
 800309e:	e01c      	b.n	80030da <keyscan+0x6a>
	{
		HAL_Delay(10);	//延时10ms
 80030a0:	200a      	movs	r0, #10
 80030a2:	f7fe f945 	bl	8001330 <HAL_Delay>
		val = KEY;		//读取数字端口PC2口电平值赋给val
 80030a6:	2104      	movs	r1, #4
 80030a8:	4812      	ldr	r0, [pc, #72]	; (80030f4 <keyscan+0x84>)
 80030aa:	f7fe fc07 	bl	80018bc <HAL_GPIO_ReadPin>
 80030ae:	4603      	mov	r3, r0
 80030b0:	607b      	str	r3, [r7, #4]
		if(val = 1)		//第二次判断按键是否被按下
 80030b2:	2301      	movs	r3, #1
 80030b4:	607b      	str	r3, [r7, #4]
		{
			BEEP_SET;	//蜂鸣器响
 80030b6:	2201      	movs	r2, #1
 80030b8:	2108      	movs	r1, #8
 80030ba:	480e      	ldr	r0, [pc, #56]	; (80030f4 <keyscan+0x84>)
 80030bc:	f7fe fc15 	bl	80018ea <HAL_GPIO_WritePin>
			while(!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))	//判断按下是否被松开
 80030c0:	e004      	b.n	80030cc <keyscan+0x5c>
				BEEP_RESET; //蜂鸣器停止
 80030c2:	2200      	movs	r2, #0
 80030c4:	2108      	movs	r1, #8
 80030c6:	480b      	ldr	r0, [pc, #44]	; (80030f4 <keyscan+0x84>)
 80030c8:	f7fe fc0f 	bl	80018ea <HAL_GPIO_WritePin>
			while(!HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))	//判断按下是否被松开
 80030cc:	2104      	movs	r1, #4
 80030ce:	4809      	ldr	r0, [pc, #36]	; (80030f4 <keyscan+0x84>)
 80030d0:	f7fe fbf4 	bl	80018bc <HAL_GPIO_ReadPin>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0f3      	beq.n	80030c2 <keyscan+0x52>
	while(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin))		//当按键被按下时
 80030da:	2104      	movs	r1, #4
 80030dc:	4805      	ldr	r0, [pc, #20]	; (80030f4 <keyscan+0x84>)
 80030de:	f7fe fbed 	bl	80018bc <HAL_GPIO_ReadPin>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1db      	bne.n	80030a0 <keyscan+0x30>
		}
		else
			BEEP_RESET; //蜂鸣器停止
	}
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40011000 	.word	0x40011000

080030f8 <SetMotorSpeed>:

extern TIM_HandleTypeDef htim4;
//signed short sPWMR,sPWML,dPWM;

void SetMotorSpeed(unsigned char ucChannel,signed char cSpeed)
{
 80030f8:	b5b0      	push	{r4, r5, r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	460a      	mov	r2, r1
 8003102:	71fb      	strb	r3, [r7, #7]
 8003104:	4613      	mov	r3, r2
 8003106:	71bb      	strb	r3, [r7, #6]
	short sPWM;

	if(cSpeed>=100) cSpeed = 100;
 8003108:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800310c:	2b63      	cmp	r3, #99	; 0x63
 800310e:	dd01      	ble.n	8003114 <SetMotorSpeed+0x1c>
 8003110:	2364      	movs	r3, #100	; 0x64
 8003112:	71bb      	strb	r3, [r7, #6]
	if(cSpeed<=-100) cSpeed =-100;
 8003114:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003118:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800311c:	da01      	bge.n	8003122 <SetMotorSpeed+0x2a>
 800311e:	239c      	movs	r3, #156	; 0x9c
 8003120:	71bb      	strb	r3, [r7, #6]

	sPWM = 7201 - fabs(cSpeed)*72;
 8003122:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fa84 	bl	8000634 <__aeabi_i2d>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4614      	mov	r4, r2
 8003132:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	4b2b      	ldr	r3, [pc, #172]	; (80031e8 <SetMotorSpeed+0xf0>)
 800313c:	4620      	mov	r0, r4
 800313e:	4629      	mov	r1, r5
 8003140:	f7fd fae2 	bl	8000708 <__aeabi_dmul>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	a125      	add	r1, pc, #148	; (adr r1, 80031e0 <SetMotorSpeed+0xe8>)
 800314a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800314e:	f7fd f923 	bl	8000398 <__aeabi_dsub>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fce7 	bl	8000b2c <__aeabi_d2iz>
 800315e:	4603      	mov	r3, r0
 8003160:	81fb      	strh	r3, [r7, #14]
	switch(ucChannel)
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <SetMotorSpeed+0x76>
 8003168:	2b01      	cmp	r3, #1
 800316a:	d019      	beq.n	80031a0 <SetMotorSpeed+0xa8>
				LEFT_MOTOR_GO_RESET;  //go
			break;


	}
}
 800316c:	e034      	b.n	80031d8 <SetMotorSpeed+0xe0>
			__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_3,sPWM);
 800316e:	4b1f      	ldr	r3, [pc, #124]	; (80031ec <SetMotorSpeed+0xf4>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003176:	63da      	str	r2, [r3, #60]	; 0x3c
			if(cSpeed>0)
 8003178:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800317c:	2b00      	cmp	r3, #0
 800317e:	dd05      	ble.n	800318c <SetMotorSpeed+0x94>
				RIGHT_MOTOR_GO_RESET; //go
 8003180:	2200      	movs	r2, #0
 8003182:	2110      	movs	r1, #16
 8003184:	481a      	ldr	r0, [pc, #104]	; (80031f0 <SetMotorSpeed+0xf8>)
 8003186:	f7fe fbb0 	bl	80018ea <HAL_GPIO_WritePin>
			break;
 800318a:	e022      	b.n	80031d2 <SetMotorSpeed+0xda>
			else if(cSpeed<0)
 800318c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da1e      	bge.n	80031d2 <SetMotorSpeed+0xda>
				RIGHT_MOTOR_GO_SET;	  //back
 8003194:	2201      	movs	r2, #1
 8003196:	2110      	movs	r1, #16
 8003198:	4815      	ldr	r0, [pc, #84]	; (80031f0 <SetMotorSpeed+0xf8>)
 800319a:	f7fe fba6 	bl	80018ea <HAL_GPIO_WritePin>
			break;
 800319e:	e018      	b.n	80031d2 <SetMotorSpeed+0xda>
			__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_4,sPWM);
 80031a0:	4b12      	ldr	r3, [pc, #72]	; (80031ec <SetMotorSpeed+0xf4>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
			if (cSpeed>0)
 80031aa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	dd05      	ble.n	80031be <SetMotorSpeed+0xc6>
				LEFT_MOTOR_GO_SET;  //back
 80031b2:	2201      	movs	r2, #1
 80031b4:	2180      	movs	r1, #128	; 0x80
 80031b6:	480f      	ldr	r0, [pc, #60]	; (80031f4 <SetMotorSpeed+0xfc>)
 80031b8:	f7fe fb97 	bl	80018ea <HAL_GPIO_WritePin>
			break;
 80031bc:	e00b      	b.n	80031d6 <SetMotorSpeed+0xde>
			else if (cSpeed<0)
 80031be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da07      	bge.n	80031d6 <SetMotorSpeed+0xde>
				LEFT_MOTOR_GO_RESET;  //go
 80031c6:	2200      	movs	r2, #0
 80031c8:	2180      	movs	r1, #128	; 0x80
 80031ca:	480a      	ldr	r0, [pc, #40]	; (80031f4 <SetMotorSpeed+0xfc>)
 80031cc:	f7fe fb8d 	bl	80018ea <HAL_GPIO_WritePin>
			break;
 80031d0:	e001      	b.n	80031d6 <SetMotorSpeed+0xde>
			break;
 80031d2:	bf00      	nop
 80031d4:	e000      	b.n	80031d8 <SetMotorSpeed+0xe0>
			break;
 80031d6:	bf00      	nop
}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bdb0      	pop	{r4, r5, r7, pc}
 80031e0:	00000000 	.word	0x00000000
 80031e4:	40bc2100 	.word	0x40bc2100
 80031e8:	40520000 	.word	0x40520000
 80031ec:	20000028 	.word	0x20000028
 80031f0:	40010800 	.word	0x40010800
 80031f4:	40010c00 	.word	0x40010c00

080031f8 <ZYSTM32_run>:

//----------------------------------运动函数--------------------------------
void ZYSTM32_run(signed char speed,int time) //前进函数
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	4603      	mov	r3, r0
 8003200:	6039      	str	r1, [r7, #0]
 8003202:	71fb      	strb	r3, [r7, #7]
	signed char f_speed = -speed;
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	425b      	negs	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	73fb      	strb	r3, [r7, #15]
	SetMotorSpeed(1,f_speed);	//左轮  //为负数
 800320c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003210:	4619      	mov	r1, r3
 8003212:	2001      	movs	r0, #1
 8003214:	f7ff ff70 	bl	80030f8 <SetMotorSpeed>
	SetMotorSpeed(0,speed);		//右轮  //为正数
 8003218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321c:	4619      	mov	r1, r3
 800321e:	2000      	movs	r0, #0
 8003220:	f7ff ff6a 	bl	80030f8 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe f882 	bl	8001330 <HAL_Delay>
}
 800322c:	bf00      	nop
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <ZYSTM32_brake>:

void ZYSTM32_brake(int time)	//刹车函数
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	SetMotorSpeed(1,0); // 左轮  //为0
 800323c:	2100      	movs	r1, #0
 800323e:	2001      	movs	r0, #1
 8003240:	f7ff ff5a 	bl	80030f8 <SetMotorSpeed>
	SetMotorSpeed(0,0); // 右轮  //为0
 8003244:	2100      	movs	r1, #0
 8003246:	2000      	movs	r0, #0
 8003248:	f7ff ff56 	bl	80030f8 <SetMotorSpeed>
	RIGHT_MOTOR_GO_RESET;
 800324c:	2200      	movs	r2, #0
 800324e:	2110      	movs	r1, #16
 8003250:	4807      	ldr	r0, [pc, #28]	; (8003270 <ZYSTM32_brake+0x3c>)
 8003252:	f7fe fb4a 	bl	80018ea <HAL_GPIO_WritePin>
	LEFT_MOTOR_GO_RESET;
 8003256:	2200      	movs	r2, #0
 8003258:	2180      	movs	r1, #128	; 0x80
 800325a:	4806      	ldr	r0, [pc, #24]	; (8003274 <ZYSTM32_brake+0x40>)
 800325c:	f7fe fb45 	bl	80018ea <HAL_GPIO_WritePin>
	HAL_Delay(time);			//时间为毫秒
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe f864 	bl	8001330 <HAL_Delay>
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40010800 	.word	0x40010800
 8003274:	40010c00 	.word	0x40010c00

08003278 <ZYSTM32_Right>:
	SetMotorSpeed(0,u_speed);			//右轮为正
	HAL_Delay(time);			//时间为毫秒
}

void ZYSTM32_Right(signed char speed,int time)	//右转函数
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	71fb      	strb	r3, [r7, #7]
	signed char f_speed = - speed;
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	425b      	negs	r3, r3
 8003288:	b2db      	uxtb	r3, r3
 800328a:	73fb      	strb	r3, [r7, #15]
	SetMotorSpeed(1,f_speed); 	// 左轮		//左轮负
 800328c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003290:	4619      	mov	r1, r3
 8003292:	2001      	movs	r0, #1
 8003294:	f7ff ff30 	bl	80030f8 <SetMotorSpeed>
	SetMotorSpeed(0,0);			//右轮为0
 8003298:	2100      	movs	r1, #0
 800329a:	2000      	movs	r0, #0
 800329c:	f7ff ff2c 	bl	80030f8 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fe f844 	bl	8001330 <HAL_Delay>
}
 80032a8:	bf00      	nop
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <ZYSTM32_back>:
	SetMotorSpeed(0,f_speed);	//右轮		//右轮为负
	HAL_Delay(time);			//时间为毫秒
}

void ZYSTM32_back(signed char speed,int time)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	71fb      	strb	r3, [r7, #7]
	signed char u_speed = 100 - speed;
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	73fb      	strb	r3, [r7, #15]
	signed char f_speed = - u_speed;
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	425b      	negs	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	73bb      	strb	r3, [r7, #14]
	SetMotorSpeed(1,u_speed);	//左轮		//左轮为正
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	4619      	mov	r1, r3
 80032d4:	2001      	movs	r0, #1
 80032d6:	f7ff ff0f 	bl	80030f8 <SetMotorSpeed>
	SetMotorSpeed(0,f_speed);	//右轮		//右轮为负
 80032da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032de:	4619      	mov	r1, r3
 80032e0:	2000      	movs	r0, #0
 80032e2:	f7ff ff09 	bl	80030f8 <SetMotorSpeed>
	HAL_Delay(time);			//时间为毫秒
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fe f821 	bl	8001330 <HAL_Delay>
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <__libc_init_array>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	2600      	movs	r6, #0
 80032fc:	4d0c      	ldr	r5, [pc, #48]	; (8003330 <__libc_init_array+0x38>)
 80032fe:	4c0d      	ldr	r4, [pc, #52]	; (8003334 <__libc_init_array+0x3c>)
 8003300:	1b64      	subs	r4, r4, r5
 8003302:	10a4      	asrs	r4, r4, #2
 8003304:	42a6      	cmp	r6, r4
 8003306:	d109      	bne.n	800331c <__libc_init_array+0x24>
 8003308:	f000 f822 	bl	8003350 <_init>
 800330c:	2600      	movs	r6, #0
 800330e:	4d0a      	ldr	r5, [pc, #40]	; (8003338 <__libc_init_array+0x40>)
 8003310:	4c0a      	ldr	r4, [pc, #40]	; (800333c <__libc_init_array+0x44>)
 8003312:	1b64      	subs	r4, r4, r5
 8003314:	10a4      	asrs	r4, r4, #2
 8003316:	42a6      	cmp	r6, r4
 8003318:	d105      	bne.n	8003326 <__libc_init_array+0x2e>
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003320:	4798      	blx	r3
 8003322:	3601      	adds	r6, #1
 8003324:	e7ee      	b.n	8003304 <__libc_init_array+0xc>
 8003326:	f855 3b04 	ldr.w	r3, [r5], #4
 800332a:	4798      	blx	r3
 800332c:	3601      	adds	r6, #1
 800332e:	e7f2      	b.n	8003316 <__libc_init_array+0x1e>
 8003330:	08003388 	.word	0x08003388
 8003334:	08003388 	.word	0x08003388
 8003338:	08003388 	.word	0x08003388
 800333c:	0800338c 	.word	0x0800338c

08003340 <memset>:
 8003340:	4603      	mov	r3, r0
 8003342:	4402      	add	r2, r0
 8003344:	4293      	cmp	r3, r2
 8003346:	d100      	bne.n	800334a <memset+0xa>
 8003348:	4770      	bx	lr
 800334a:	f803 1b01 	strb.w	r1, [r3], #1
 800334e:	e7f9      	b.n	8003344 <memset+0x4>

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
